// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package fundraisingv1

import (
	_ "cosmossdk.io/api/amino"
	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	reflect "reflect"
	sync "sync"
)

var _ protoreflect.List = (*_BaseAuction_10_list)(nil)

type _BaseAuction_10_list struct {
	list *[]*VestingSchedule
}

func (x *_BaseAuction_10_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BaseAuction_10_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BaseAuction_10_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VestingSchedule)
	(*x.list)[i] = concreteValue
}

func (x *_BaseAuction_10_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*VestingSchedule)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BaseAuction_10_list) AppendMutable() protoreflect.Value {
	v := new(VestingSchedule)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BaseAuction_10_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BaseAuction_10_list) NewElement() protoreflect.Value {
	v := new(VestingSchedule)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BaseAuction_10_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_BaseAuction_12_list)(nil)

type _BaseAuction_12_list struct {
	list *[]*timestamppb.Timestamp
}

func (x *_BaseAuction_12_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_BaseAuction_12_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_BaseAuction_12_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*timestamppb.Timestamp)
	(*x.list)[i] = concreteValue
}

func (x *_BaseAuction_12_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*timestamppb.Timestamp)
	*x.list = append(*x.list, concreteValue)
}

func (x *_BaseAuction_12_list) AppendMutable() protoreflect.Value {
	v := new(timestamppb.Timestamp)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BaseAuction_12_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_BaseAuction_12_list) NewElement() protoreflect.Value {
	v := new(timestamppb.Timestamp)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_BaseAuction_12_list) IsValid() bool {
	return x.list != nil
}

var (
	md_BaseAuction                         protoreflect.MessageDescriptor
	fd_BaseAuction_id                      protoreflect.FieldDescriptor
	fd_BaseAuction_type                    protoreflect.FieldDescriptor
	fd_BaseAuction_auctioneer              protoreflect.FieldDescriptor
	fd_BaseAuction_selling_reserve_address protoreflect.FieldDescriptor
	fd_BaseAuction_paying_reserve_address  protoreflect.FieldDescriptor
	fd_BaseAuction_start_price             protoreflect.FieldDescriptor
	fd_BaseAuction_selling_coin            protoreflect.FieldDescriptor
	fd_BaseAuction_paying_coin_denom       protoreflect.FieldDescriptor
	fd_BaseAuction_vesting_reserve_address protoreflect.FieldDescriptor
	fd_BaseAuction_vesting_schedules       protoreflect.FieldDescriptor
	fd_BaseAuction_start_time              protoreflect.FieldDescriptor
	fd_BaseAuction_end_times               protoreflect.FieldDescriptor
	fd_BaseAuction_status                  protoreflect.FieldDescriptor
)

func init() {
	file_fundraising_fundraising_v1_auction_proto_init()
	md_BaseAuction = File_fundraising_fundraising_v1_auction_proto.Messages().ByName("BaseAuction")
	fd_BaseAuction_id = md_BaseAuction.Fields().ByName("id")
	fd_BaseAuction_type = md_BaseAuction.Fields().ByName("type")
	fd_BaseAuction_auctioneer = md_BaseAuction.Fields().ByName("auctioneer")
	fd_BaseAuction_selling_reserve_address = md_BaseAuction.Fields().ByName("selling_reserve_address")
	fd_BaseAuction_paying_reserve_address = md_BaseAuction.Fields().ByName("paying_reserve_address")
	fd_BaseAuction_start_price = md_BaseAuction.Fields().ByName("start_price")
	fd_BaseAuction_selling_coin = md_BaseAuction.Fields().ByName("selling_coin")
	fd_BaseAuction_paying_coin_denom = md_BaseAuction.Fields().ByName("paying_coin_denom")
	fd_BaseAuction_vesting_reserve_address = md_BaseAuction.Fields().ByName("vesting_reserve_address")
	fd_BaseAuction_vesting_schedules = md_BaseAuction.Fields().ByName("vesting_schedules")
	fd_BaseAuction_start_time = md_BaseAuction.Fields().ByName("start_time")
	fd_BaseAuction_end_times = md_BaseAuction.Fields().ByName("end_times")
	fd_BaseAuction_status = md_BaseAuction.Fields().ByName("status")
}

var _ protoreflect.Message = (*fastReflection_BaseAuction)(nil)

type fastReflection_BaseAuction BaseAuction

func (x *BaseAuction) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BaseAuction)(x)
}

func (x *BaseAuction) slowProtoReflect() protoreflect.Message {
	mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BaseAuction_messageType fastReflection_BaseAuction_messageType
var _ protoreflect.MessageType = fastReflection_BaseAuction_messageType{}

type fastReflection_BaseAuction_messageType struct{}

func (x fastReflection_BaseAuction_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BaseAuction)(nil)
}
func (x fastReflection_BaseAuction_messageType) New() protoreflect.Message {
	return new(fastReflection_BaseAuction)
}
func (x fastReflection_BaseAuction_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BaseAuction
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BaseAuction) Descriptor() protoreflect.MessageDescriptor {
	return md_BaseAuction
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BaseAuction) Type() protoreflect.MessageType {
	return _fastReflection_BaseAuction_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BaseAuction) New() protoreflect.Message {
	return new(fastReflection_BaseAuction)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BaseAuction) Interface() protoreflect.ProtoMessage {
	return (*BaseAuction)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BaseAuction) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Id != uint64(0) {
		value := protoreflect.ValueOfUint64(x.Id)
		if !f(fd_BaseAuction_id, value) {
			return
		}
	}
	if x.Type_ != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Type_))
		if !f(fd_BaseAuction_type, value) {
			return
		}
	}
	if x.Auctioneer != "" {
		value := protoreflect.ValueOfString(x.Auctioneer)
		if !f(fd_BaseAuction_auctioneer, value) {
			return
		}
	}
	if x.SellingReserveAddress != "" {
		value := protoreflect.ValueOfString(x.SellingReserveAddress)
		if !f(fd_BaseAuction_selling_reserve_address, value) {
			return
		}
	}
	if x.PayingReserveAddress != "" {
		value := protoreflect.ValueOfString(x.PayingReserveAddress)
		if !f(fd_BaseAuction_paying_reserve_address, value) {
			return
		}
	}
	if x.StartPrice != "" {
		value := protoreflect.ValueOfString(x.StartPrice)
		if !f(fd_BaseAuction_start_price, value) {
			return
		}
	}
	if x.SellingCoin != nil {
		value := protoreflect.ValueOfMessage(x.SellingCoin.ProtoReflect())
		if !f(fd_BaseAuction_selling_coin, value) {
			return
		}
	}
	if x.PayingCoinDenom != "" {
		value := protoreflect.ValueOfString(x.PayingCoinDenom)
		if !f(fd_BaseAuction_paying_coin_denom, value) {
			return
		}
	}
	if x.VestingReserveAddress != "" {
		value := protoreflect.ValueOfString(x.VestingReserveAddress)
		if !f(fd_BaseAuction_vesting_reserve_address, value) {
			return
		}
	}
	if len(x.VestingSchedules) != 0 {
		value := protoreflect.ValueOfList(&_BaseAuction_10_list{list: &x.VestingSchedules})
		if !f(fd_BaseAuction_vesting_schedules, value) {
			return
		}
	}
	if x.StartTime != nil {
		value := protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
		if !f(fd_BaseAuction_start_time, value) {
			return
		}
	}
	if len(x.EndTimes) != 0 {
		value := protoreflect.ValueOfList(&_BaseAuction_12_list{list: &x.EndTimes})
		if !f(fd_BaseAuction_end_times, value) {
			return
		}
	}
	if x.Status != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.Status))
		if !f(fd_BaseAuction_status, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BaseAuction) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BaseAuction.id":
		return x.Id != uint64(0)
	case "fundraising.fundraising.v1.BaseAuction.type":
		return x.Type_ != 0
	case "fundraising.fundraising.v1.BaseAuction.auctioneer":
		return x.Auctioneer != ""
	case "fundraising.fundraising.v1.BaseAuction.selling_reserve_address":
		return x.SellingReserveAddress != ""
	case "fundraising.fundraising.v1.BaseAuction.paying_reserve_address":
		return x.PayingReserveAddress != ""
	case "fundraising.fundraising.v1.BaseAuction.start_price":
		return x.StartPrice != ""
	case "fundraising.fundraising.v1.BaseAuction.selling_coin":
		return x.SellingCoin != nil
	case "fundraising.fundraising.v1.BaseAuction.paying_coin_denom":
		return x.PayingCoinDenom != ""
	case "fundraising.fundraising.v1.BaseAuction.vesting_reserve_address":
		return x.VestingReserveAddress != ""
	case "fundraising.fundraising.v1.BaseAuction.vesting_schedules":
		return len(x.VestingSchedules) != 0
	case "fundraising.fundraising.v1.BaseAuction.start_time":
		return x.StartTime != nil
	case "fundraising.fundraising.v1.BaseAuction.end_times":
		return len(x.EndTimes) != 0
	case "fundraising.fundraising.v1.BaseAuction.status":
		return x.Status != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BaseAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BaseAuction does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BaseAuction) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BaseAuction.id":
		x.Id = uint64(0)
	case "fundraising.fundraising.v1.BaseAuction.type":
		x.Type_ = 0
	case "fundraising.fundraising.v1.BaseAuction.auctioneer":
		x.Auctioneer = ""
	case "fundraising.fundraising.v1.BaseAuction.selling_reserve_address":
		x.SellingReserveAddress = ""
	case "fundraising.fundraising.v1.BaseAuction.paying_reserve_address":
		x.PayingReserveAddress = ""
	case "fundraising.fundraising.v1.BaseAuction.start_price":
		x.StartPrice = ""
	case "fundraising.fundraising.v1.BaseAuction.selling_coin":
		x.SellingCoin = nil
	case "fundraising.fundraising.v1.BaseAuction.paying_coin_denom":
		x.PayingCoinDenom = ""
	case "fundraising.fundraising.v1.BaseAuction.vesting_reserve_address":
		x.VestingReserveAddress = ""
	case "fundraising.fundraising.v1.BaseAuction.vesting_schedules":
		x.VestingSchedules = nil
	case "fundraising.fundraising.v1.BaseAuction.start_time":
		x.StartTime = nil
	case "fundraising.fundraising.v1.BaseAuction.end_times":
		x.EndTimes = nil
	case "fundraising.fundraising.v1.BaseAuction.status":
		x.Status = 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BaseAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BaseAuction does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BaseAuction) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fundraising.fundraising.v1.BaseAuction.id":
		value := x.Id
		return protoreflect.ValueOfUint64(value)
	case "fundraising.fundraising.v1.BaseAuction.type":
		value := x.Type_
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "fundraising.fundraising.v1.BaseAuction.auctioneer":
		value := x.Auctioneer
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BaseAuction.selling_reserve_address":
		value := x.SellingReserveAddress
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BaseAuction.paying_reserve_address":
		value := x.PayingReserveAddress
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BaseAuction.start_price":
		value := x.StartPrice
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BaseAuction.selling_coin":
		value := x.SellingCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fundraising.fundraising.v1.BaseAuction.paying_coin_denom":
		value := x.PayingCoinDenom
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BaseAuction.vesting_reserve_address":
		value := x.VestingReserveAddress
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BaseAuction.vesting_schedules":
		if len(x.VestingSchedules) == 0 {
			return protoreflect.ValueOfList(&_BaseAuction_10_list{})
		}
		listValue := &_BaseAuction_10_list{list: &x.VestingSchedules}
		return protoreflect.ValueOfList(listValue)
	case "fundraising.fundraising.v1.BaseAuction.start_time":
		value := x.StartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fundraising.fundraising.v1.BaseAuction.end_times":
		if len(x.EndTimes) == 0 {
			return protoreflect.ValueOfList(&_BaseAuction_12_list{})
		}
		listValue := &_BaseAuction_12_list{list: &x.EndTimes}
		return protoreflect.ValueOfList(listValue)
	case "fundraising.fundraising.v1.BaseAuction.status":
		value := x.Status
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BaseAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BaseAuction does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BaseAuction) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BaseAuction.id":
		x.Id = value.Uint()
	case "fundraising.fundraising.v1.BaseAuction.type":
		x.Type_ = (AuctionType)(value.Enum())
	case "fundraising.fundraising.v1.BaseAuction.auctioneer":
		x.Auctioneer = value.Interface().(string)
	case "fundraising.fundraising.v1.BaseAuction.selling_reserve_address":
		x.SellingReserveAddress = value.Interface().(string)
	case "fundraising.fundraising.v1.BaseAuction.paying_reserve_address":
		x.PayingReserveAddress = value.Interface().(string)
	case "fundraising.fundraising.v1.BaseAuction.start_price":
		x.StartPrice = value.Interface().(string)
	case "fundraising.fundraising.v1.BaseAuction.selling_coin":
		x.SellingCoin = value.Message().Interface().(*v1beta1.Coin)
	case "fundraising.fundraising.v1.BaseAuction.paying_coin_denom":
		x.PayingCoinDenom = value.Interface().(string)
	case "fundraising.fundraising.v1.BaseAuction.vesting_reserve_address":
		x.VestingReserveAddress = value.Interface().(string)
	case "fundraising.fundraising.v1.BaseAuction.vesting_schedules":
		lv := value.List()
		clv := lv.(*_BaseAuction_10_list)
		x.VestingSchedules = *clv.list
	case "fundraising.fundraising.v1.BaseAuction.start_time":
		x.StartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "fundraising.fundraising.v1.BaseAuction.end_times":
		lv := value.List()
		clv := lv.(*_BaseAuction_12_list)
		x.EndTimes = *clv.list
	case "fundraising.fundraising.v1.BaseAuction.status":
		x.Status = (AuctionStatus)(value.Enum())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BaseAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BaseAuction does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BaseAuction) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BaseAuction.selling_coin":
		if x.SellingCoin == nil {
			x.SellingCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.SellingCoin.ProtoReflect())
	case "fundraising.fundraising.v1.BaseAuction.vesting_schedules":
		if x.VestingSchedules == nil {
			x.VestingSchedules = []*VestingSchedule{}
		}
		value := &_BaseAuction_10_list{list: &x.VestingSchedules}
		return protoreflect.ValueOfList(value)
	case "fundraising.fundraising.v1.BaseAuction.start_time":
		if x.StartTime == nil {
			x.StartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.StartTime.ProtoReflect())
	case "fundraising.fundraising.v1.BaseAuction.end_times":
		if x.EndTimes == nil {
			x.EndTimes = []*timestamppb.Timestamp{}
		}
		value := &_BaseAuction_12_list{list: &x.EndTimes}
		return protoreflect.ValueOfList(value)
	case "fundraising.fundraising.v1.BaseAuction.id":
		panic(fmt.Errorf("field id of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.type":
		panic(fmt.Errorf("field type of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.auctioneer":
		panic(fmt.Errorf("field auctioneer of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.selling_reserve_address":
		panic(fmt.Errorf("field selling_reserve_address of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.paying_reserve_address":
		panic(fmt.Errorf("field paying_reserve_address of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.start_price":
		panic(fmt.Errorf("field start_price of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.paying_coin_denom":
		panic(fmt.Errorf("field paying_coin_denom of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.vesting_reserve_address":
		panic(fmt.Errorf("field vesting_reserve_address of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	case "fundraising.fundraising.v1.BaseAuction.status":
		panic(fmt.Errorf("field status of message fundraising.fundraising.v1.BaseAuction is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BaseAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BaseAuction does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BaseAuction) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BaseAuction.id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "fundraising.fundraising.v1.BaseAuction.type":
		return protoreflect.ValueOfEnum(0)
	case "fundraising.fundraising.v1.BaseAuction.auctioneer":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BaseAuction.selling_reserve_address":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BaseAuction.paying_reserve_address":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BaseAuction.start_price":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BaseAuction.selling_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fundraising.fundraising.v1.BaseAuction.paying_coin_denom":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BaseAuction.vesting_reserve_address":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BaseAuction.vesting_schedules":
		list := []*VestingSchedule{}
		return protoreflect.ValueOfList(&_BaseAuction_10_list{list: &list})
	case "fundraising.fundraising.v1.BaseAuction.start_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fundraising.fundraising.v1.BaseAuction.end_times":
		list := []*timestamppb.Timestamp{}
		return protoreflect.ValueOfList(&_BaseAuction_12_list{list: &list})
	case "fundraising.fundraising.v1.BaseAuction.status":
		return protoreflect.ValueOfEnum(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BaseAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BaseAuction does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BaseAuction) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fundraising.fundraising.v1.BaseAuction", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BaseAuction) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BaseAuction) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BaseAuction) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BaseAuction) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BaseAuction)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.Id != 0 {
			n += 1 + runtime.Sov(uint64(x.Id))
		}
		if x.Type_ != 0 {
			n += 1 + runtime.Sov(uint64(x.Type_))
		}
		l = len(x.Auctioneer)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.SellingReserveAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PayingReserveAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.StartPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.SellingCoin != nil {
			l = options.Size(x.SellingCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PayingCoinDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VestingReserveAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.VestingSchedules) > 0 {
			for _, e := range x.VestingSchedules {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.StartTime != nil {
			l = options.Size(x.StartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.EndTimes) > 0 {
			for _, e := range x.EndTimes {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		if x.Status != 0 {
			n += 1 + runtime.Sov(uint64(x.Status))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BaseAuction)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Status != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Status))
			i--
			dAtA[i] = 0x68
		}
		if len(x.EndTimes) > 0 {
			for iNdEx := len(x.EndTimes) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.EndTimes[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x62
			}
		}
		if x.StartTime != nil {
			encoded, err := options.Marshal(x.StartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.VestingSchedules) > 0 {
			for iNdEx := len(x.VestingSchedules) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.VestingSchedules[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x52
			}
		}
		if len(x.VestingReserveAddress) > 0 {
			i -= len(x.VestingReserveAddress)
			copy(dAtA[i:], x.VestingReserveAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VestingReserveAddress)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.PayingCoinDenom) > 0 {
			i -= len(x.PayingCoinDenom)
			copy(dAtA[i:], x.PayingCoinDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PayingCoinDenom)))
			i--
			dAtA[i] = 0x42
		}
		if x.SellingCoin != nil {
			encoded, err := options.Marshal(x.SellingCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.StartPrice) > 0 {
			i -= len(x.StartPrice)
			copy(dAtA[i:], x.StartPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.StartPrice)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.PayingReserveAddress) > 0 {
			i -= len(x.PayingReserveAddress)
			copy(dAtA[i:], x.PayingReserveAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PayingReserveAddress)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.SellingReserveAddress) > 0 {
			i -= len(x.SellingReserveAddress)
			copy(dAtA[i:], x.SellingReserveAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SellingReserveAddress)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.Auctioneer) > 0 {
			i -= len(x.Auctioneer)
			copy(dAtA[i:], x.Auctioneer)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Auctioneer)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Type_ != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Type_))
			i--
			dAtA[i] = 0x10
		}
		if x.Id != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Id))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BaseAuction)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BaseAuction: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BaseAuction: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
				}
				x.Id = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Id |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Type_", wireType)
				}
				x.Type_ = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Type_ |= AuctionType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Auctioneer = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SellingReserveAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SellingReserveAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PayingReserveAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PayingReserveAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.StartPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SellingCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.SellingCoin == nil {
					x.SellingCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.SellingCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PayingCoinDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PayingCoinDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VestingReserveAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VestingReserveAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VestingSchedules", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VestingSchedules = append(x.VestingSchedules, &VestingSchedule{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.VestingSchedules[len(x.VestingSchedules)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.StartTime == nil {
					x.StartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.StartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field EndTimes", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.EndTimes = append(x.EndTimes, &timestamppb.Timestamp{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.EndTimes[len(x.EndTimes)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
				}
				x.Status = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Status |= AuctionStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_FixedPriceAuction                        protoreflect.MessageDescriptor
	fd_FixedPriceAuction_base_auction           protoreflect.FieldDescriptor
	fd_FixedPriceAuction_remaining_selling_coin protoreflect.FieldDescriptor
)

func init() {
	file_fundraising_fundraising_v1_auction_proto_init()
	md_FixedPriceAuction = File_fundraising_fundraising_v1_auction_proto.Messages().ByName("FixedPriceAuction")
	fd_FixedPriceAuction_base_auction = md_FixedPriceAuction.Fields().ByName("base_auction")
	fd_FixedPriceAuction_remaining_selling_coin = md_FixedPriceAuction.Fields().ByName("remaining_selling_coin")
}

var _ protoreflect.Message = (*fastReflection_FixedPriceAuction)(nil)

type fastReflection_FixedPriceAuction FixedPriceAuction

func (x *FixedPriceAuction) ProtoReflect() protoreflect.Message {
	return (*fastReflection_FixedPriceAuction)(x)
}

func (x *FixedPriceAuction) slowProtoReflect() protoreflect.Message {
	mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_FixedPriceAuction_messageType fastReflection_FixedPriceAuction_messageType
var _ protoreflect.MessageType = fastReflection_FixedPriceAuction_messageType{}

type fastReflection_FixedPriceAuction_messageType struct{}

func (x fastReflection_FixedPriceAuction_messageType) Zero() protoreflect.Message {
	return (*fastReflection_FixedPriceAuction)(nil)
}
func (x fastReflection_FixedPriceAuction_messageType) New() protoreflect.Message {
	return new(fastReflection_FixedPriceAuction)
}
func (x fastReflection_FixedPriceAuction_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_FixedPriceAuction
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_FixedPriceAuction) Descriptor() protoreflect.MessageDescriptor {
	return md_FixedPriceAuction
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_FixedPriceAuction) Type() protoreflect.MessageType {
	return _fastReflection_FixedPriceAuction_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_FixedPriceAuction) New() protoreflect.Message {
	return new(fastReflection_FixedPriceAuction)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_FixedPriceAuction) Interface() protoreflect.ProtoMessage {
	return (*FixedPriceAuction)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_FixedPriceAuction) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseAuction != nil {
		value := protoreflect.ValueOfMessage(x.BaseAuction.ProtoReflect())
		if !f(fd_FixedPriceAuction_base_auction, value) {
			return
		}
	}
	if x.RemainingSellingCoin != nil {
		value := protoreflect.ValueOfMessage(x.RemainingSellingCoin.ProtoReflect())
		if !f(fd_FixedPriceAuction_remaining_selling_coin, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_FixedPriceAuction) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.FixedPriceAuction.base_auction":
		return x.BaseAuction != nil
	case "fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin":
		return x.RemainingSellingCoin != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.FixedPriceAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.FixedPriceAuction does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FixedPriceAuction) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.FixedPriceAuction.base_auction":
		x.BaseAuction = nil
	case "fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin":
		x.RemainingSellingCoin = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.FixedPriceAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.FixedPriceAuction does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_FixedPriceAuction) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fundraising.fundraising.v1.FixedPriceAuction.base_auction":
		value := x.BaseAuction
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin":
		value := x.RemainingSellingCoin
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.FixedPriceAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.FixedPriceAuction does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FixedPriceAuction) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.FixedPriceAuction.base_auction":
		x.BaseAuction = value.Message().Interface().(*BaseAuction)
	case "fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin":
		x.RemainingSellingCoin = value.Message().Interface().(*v1beta1.Coin)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.FixedPriceAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.FixedPriceAuction does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FixedPriceAuction) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.FixedPriceAuction.base_auction":
		if x.BaseAuction == nil {
			x.BaseAuction = new(BaseAuction)
		}
		return protoreflect.ValueOfMessage(x.BaseAuction.ProtoReflect())
	case "fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin":
		if x.RemainingSellingCoin == nil {
			x.RemainingSellingCoin = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.RemainingSellingCoin.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.FixedPriceAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.FixedPriceAuction does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_FixedPriceAuction) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.FixedPriceAuction.base_auction":
		m := new(BaseAuction)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.FixedPriceAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.FixedPriceAuction does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_FixedPriceAuction) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fundraising.fundraising.v1.FixedPriceAuction", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_FixedPriceAuction) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_FixedPriceAuction) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_FixedPriceAuction) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_FixedPriceAuction) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*FixedPriceAuction)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BaseAuction != nil {
			l = options.Size(x.BaseAuction)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RemainingSellingCoin != nil {
			l = options.Size(x.RemainingSellingCoin)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*FixedPriceAuction)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.RemainingSellingCoin != nil {
			encoded, err := options.Marshal(x.RemainingSellingCoin)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if x.BaseAuction != nil {
			encoded, err := options.Marshal(x.BaseAuction)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*FixedPriceAuction)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FixedPriceAuction: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: FixedPriceAuction: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BaseAuction == nil {
					x.BaseAuction = &BaseAuction{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BaseAuction); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RemainingSellingCoin", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RemainingSellingCoin == nil {
					x.RemainingSellingCoin = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RemainingSellingCoin); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_BatchAuction                     protoreflect.MessageDescriptor
	fd_BatchAuction_base_auction        protoreflect.FieldDescriptor
	fd_BatchAuction_min_bid_price       protoreflect.FieldDescriptor
	fd_BatchAuction_matched_price       protoreflect.FieldDescriptor
	fd_BatchAuction_max_extended_round  protoreflect.FieldDescriptor
	fd_BatchAuction_extended_round_rate protoreflect.FieldDescriptor
)

func init() {
	file_fundraising_fundraising_v1_auction_proto_init()
	md_BatchAuction = File_fundraising_fundraising_v1_auction_proto.Messages().ByName("BatchAuction")
	fd_BatchAuction_base_auction = md_BatchAuction.Fields().ByName("base_auction")
	fd_BatchAuction_min_bid_price = md_BatchAuction.Fields().ByName("min_bid_price")
	fd_BatchAuction_matched_price = md_BatchAuction.Fields().ByName("matched_price")
	fd_BatchAuction_max_extended_round = md_BatchAuction.Fields().ByName("max_extended_round")
	fd_BatchAuction_extended_round_rate = md_BatchAuction.Fields().ByName("extended_round_rate")
}

var _ protoreflect.Message = (*fastReflection_BatchAuction)(nil)

type fastReflection_BatchAuction BatchAuction

func (x *BatchAuction) ProtoReflect() protoreflect.Message {
	return (*fastReflection_BatchAuction)(x)
}

func (x *BatchAuction) slowProtoReflect() protoreflect.Message {
	mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_BatchAuction_messageType fastReflection_BatchAuction_messageType
var _ protoreflect.MessageType = fastReflection_BatchAuction_messageType{}

type fastReflection_BatchAuction_messageType struct{}

func (x fastReflection_BatchAuction_messageType) Zero() protoreflect.Message {
	return (*fastReflection_BatchAuction)(nil)
}
func (x fastReflection_BatchAuction_messageType) New() protoreflect.Message {
	return new(fastReflection_BatchAuction)
}
func (x fastReflection_BatchAuction_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_BatchAuction
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_BatchAuction) Descriptor() protoreflect.MessageDescriptor {
	return md_BatchAuction
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_BatchAuction) Type() protoreflect.MessageType {
	return _fastReflection_BatchAuction_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_BatchAuction) New() protoreflect.Message {
	return new(fastReflection_BatchAuction)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_BatchAuction) Interface() protoreflect.ProtoMessage {
	return (*BatchAuction)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_BatchAuction) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.BaseAuction != nil {
		value := protoreflect.ValueOfMessage(x.BaseAuction.ProtoReflect())
		if !f(fd_BatchAuction_base_auction, value) {
			return
		}
	}
	if x.MinBidPrice != "" {
		value := protoreflect.ValueOfString(x.MinBidPrice)
		if !f(fd_BatchAuction_min_bid_price, value) {
			return
		}
	}
	if x.MatchedPrice != "" {
		value := protoreflect.ValueOfString(x.MatchedPrice)
		if !f(fd_BatchAuction_matched_price, value) {
			return
		}
	}
	if x.MaxExtendedRound != uint32(0) {
		value := protoreflect.ValueOfUint32(x.MaxExtendedRound)
		if !f(fd_BatchAuction_max_extended_round, value) {
			return
		}
	}
	if x.ExtendedRoundRate != "" {
		value := protoreflect.ValueOfString(x.ExtendedRoundRate)
		if !f(fd_BatchAuction_extended_round_rate, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_BatchAuction) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BatchAuction.base_auction":
		return x.BaseAuction != nil
	case "fundraising.fundraising.v1.BatchAuction.min_bid_price":
		return x.MinBidPrice != ""
	case "fundraising.fundraising.v1.BatchAuction.matched_price":
		return x.MatchedPrice != ""
	case "fundraising.fundraising.v1.BatchAuction.max_extended_round":
		return x.MaxExtendedRound != uint32(0)
	case "fundraising.fundraising.v1.BatchAuction.extended_round_rate":
		return x.ExtendedRoundRate != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BatchAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BatchAuction does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchAuction) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BatchAuction.base_auction":
		x.BaseAuction = nil
	case "fundraising.fundraising.v1.BatchAuction.min_bid_price":
		x.MinBidPrice = ""
	case "fundraising.fundraising.v1.BatchAuction.matched_price":
		x.MatchedPrice = ""
	case "fundraising.fundraising.v1.BatchAuction.max_extended_round":
		x.MaxExtendedRound = uint32(0)
	case "fundraising.fundraising.v1.BatchAuction.extended_round_rate":
		x.ExtendedRoundRate = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BatchAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BatchAuction does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_BatchAuction) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fundraising.fundraising.v1.BatchAuction.base_auction":
		value := x.BaseAuction
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fundraising.fundraising.v1.BatchAuction.min_bid_price":
		value := x.MinBidPrice
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BatchAuction.matched_price":
		value := x.MatchedPrice
		return protoreflect.ValueOfString(value)
	case "fundraising.fundraising.v1.BatchAuction.max_extended_round":
		value := x.MaxExtendedRound
		return protoreflect.ValueOfUint32(value)
	case "fundraising.fundraising.v1.BatchAuction.extended_round_rate":
		value := x.ExtendedRoundRate
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BatchAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BatchAuction does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchAuction) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BatchAuction.base_auction":
		x.BaseAuction = value.Message().Interface().(*BaseAuction)
	case "fundraising.fundraising.v1.BatchAuction.min_bid_price":
		x.MinBidPrice = value.Interface().(string)
	case "fundraising.fundraising.v1.BatchAuction.matched_price":
		x.MatchedPrice = value.Interface().(string)
	case "fundraising.fundraising.v1.BatchAuction.max_extended_round":
		x.MaxExtendedRound = uint32(value.Uint())
	case "fundraising.fundraising.v1.BatchAuction.extended_round_rate":
		x.ExtendedRoundRate = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BatchAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BatchAuction does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchAuction) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BatchAuction.base_auction":
		if x.BaseAuction == nil {
			x.BaseAuction = new(BaseAuction)
		}
		return protoreflect.ValueOfMessage(x.BaseAuction.ProtoReflect())
	case "fundraising.fundraising.v1.BatchAuction.min_bid_price":
		panic(fmt.Errorf("field min_bid_price of message fundraising.fundraising.v1.BatchAuction is not mutable"))
	case "fundraising.fundraising.v1.BatchAuction.matched_price":
		panic(fmt.Errorf("field matched_price of message fundraising.fundraising.v1.BatchAuction is not mutable"))
	case "fundraising.fundraising.v1.BatchAuction.max_extended_round":
		panic(fmt.Errorf("field max_extended_round of message fundraising.fundraising.v1.BatchAuction is not mutable"))
	case "fundraising.fundraising.v1.BatchAuction.extended_round_rate":
		panic(fmt.Errorf("field extended_round_rate of message fundraising.fundraising.v1.BatchAuction is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BatchAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BatchAuction does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_BatchAuction) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.BatchAuction.base_auction":
		m := new(BaseAuction)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fundraising.fundraising.v1.BatchAuction.min_bid_price":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BatchAuction.matched_price":
		return protoreflect.ValueOfString("")
	case "fundraising.fundraising.v1.BatchAuction.max_extended_round":
		return protoreflect.ValueOfUint32(uint32(0))
	case "fundraising.fundraising.v1.BatchAuction.extended_round_rate":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.BatchAuction"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.BatchAuction does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_BatchAuction) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fundraising.fundraising.v1.BatchAuction", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_BatchAuction) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_BatchAuction) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_BatchAuction) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_BatchAuction) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*BatchAuction)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.BaseAuction != nil {
			l = options.Size(x.BaseAuction)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinBidPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MatchedPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.MaxExtendedRound != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxExtendedRound))
		}
		l = len(x.ExtendedRoundRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*BatchAuction)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.ExtendedRoundRate) > 0 {
			i -= len(x.ExtendedRoundRate)
			copy(dAtA[i:], x.ExtendedRoundRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ExtendedRoundRate)))
			i--
			dAtA[i] = 0x2a
		}
		if x.MaxExtendedRound != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxExtendedRound))
			i--
			dAtA[i] = 0x20
		}
		if len(x.MatchedPrice) > 0 {
			i -= len(x.MatchedPrice)
			copy(dAtA[i:], x.MatchedPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MatchedPrice)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.MinBidPrice) > 0 {
			i -= len(x.MinBidPrice)
			copy(dAtA[i:], x.MinBidPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinBidPrice)))
			i--
			dAtA[i] = 0x12
		}
		if x.BaseAuction != nil {
			encoded, err := options.Marshal(x.BaseAuction)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*BatchAuction)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BatchAuction: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: BatchAuction: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.BaseAuction == nil {
					x.BaseAuction = &BaseAuction{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.BaseAuction); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinBidPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinBidPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MatchedPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MatchedPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxExtendedRound", wireType)
				}
				x.MaxExtendedRound = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxExtendedRound |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ExtendedRoundRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ExtendedRoundRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_VestingSchedule              protoreflect.MessageDescriptor
	fd_VestingSchedule_release_time protoreflect.FieldDescriptor
	fd_VestingSchedule_weight       protoreflect.FieldDescriptor
)

func init() {
	file_fundraising_fundraising_v1_auction_proto_init()
	md_VestingSchedule = File_fundraising_fundraising_v1_auction_proto.Messages().ByName("VestingSchedule")
	fd_VestingSchedule_release_time = md_VestingSchedule.Fields().ByName("release_time")
	fd_VestingSchedule_weight = md_VestingSchedule.Fields().ByName("weight")
}

var _ protoreflect.Message = (*fastReflection_VestingSchedule)(nil)

type fastReflection_VestingSchedule VestingSchedule

func (x *VestingSchedule) ProtoReflect() protoreflect.Message {
	return (*fastReflection_VestingSchedule)(x)
}

func (x *VestingSchedule) slowProtoReflect() protoreflect.Message {
	mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_VestingSchedule_messageType fastReflection_VestingSchedule_messageType
var _ protoreflect.MessageType = fastReflection_VestingSchedule_messageType{}

type fastReflection_VestingSchedule_messageType struct{}

func (x fastReflection_VestingSchedule_messageType) Zero() protoreflect.Message {
	return (*fastReflection_VestingSchedule)(nil)
}
func (x fastReflection_VestingSchedule_messageType) New() protoreflect.Message {
	return new(fastReflection_VestingSchedule)
}
func (x fastReflection_VestingSchedule_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_VestingSchedule
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_VestingSchedule) Descriptor() protoreflect.MessageDescriptor {
	return md_VestingSchedule
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_VestingSchedule) Type() protoreflect.MessageType {
	return _fastReflection_VestingSchedule_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_VestingSchedule) New() protoreflect.Message {
	return new(fastReflection_VestingSchedule)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_VestingSchedule) Interface() protoreflect.ProtoMessage {
	return (*VestingSchedule)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_VestingSchedule) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ReleaseTime != nil {
		value := protoreflect.ValueOfMessage(x.ReleaseTime.ProtoReflect())
		if !f(fd_VestingSchedule_release_time, value) {
			return
		}
	}
	if x.Weight != "" {
		value := protoreflect.ValueOfString(x.Weight)
		if !f(fd_VestingSchedule_weight, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_VestingSchedule) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.VestingSchedule.release_time":
		return x.ReleaseTime != nil
	case "fundraising.fundraising.v1.VestingSchedule.weight":
		return x.Weight != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.VestingSchedule"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.VestingSchedule does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VestingSchedule) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.VestingSchedule.release_time":
		x.ReleaseTime = nil
	case "fundraising.fundraising.v1.VestingSchedule.weight":
		x.Weight = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.VestingSchedule"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.VestingSchedule does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_VestingSchedule) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "fundraising.fundraising.v1.VestingSchedule.release_time":
		value := x.ReleaseTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "fundraising.fundraising.v1.VestingSchedule.weight":
		value := x.Weight
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.VestingSchedule"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.VestingSchedule does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VestingSchedule) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.VestingSchedule.release_time":
		x.ReleaseTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "fundraising.fundraising.v1.VestingSchedule.weight":
		x.Weight = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.VestingSchedule"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.VestingSchedule does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VestingSchedule) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.VestingSchedule.release_time":
		if x.ReleaseTime == nil {
			x.ReleaseTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.ReleaseTime.ProtoReflect())
	case "fundraising.fundraising.v1.VestingSchedule.weight":
		panic(fmt.Errorf("field weight of message fundraising.fundraising.v1.VestingSchedule is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.VestingSchedule"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.VestingSchedule does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_VestingSchedule) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "fundraising.fundraising.v1.VestingSchedule.release_time":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "fundraising.fundraising.v1.VestingSchedule.weight":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: fundraising.fundraising.v1.VestingSchedule"))
		}
		panic(fmt.Errorf("message fundraising.fundraising.v1.VestingSchedule does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_VestingSchedule) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in fundraising.fundraising.v1.VestingSchedule", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_VestingSchedule) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_VestingSchedule) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_VestingSchedule) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_VestingSchedule) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*VestingSchedule)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.ReleaseTime != nil {
			l = options.Size(x.ReleaseTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Weight)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*VestingSchedule)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Weight) > 0 {
			i -= len(x.Weight)
			copy(dAtA[i:], x.Weight)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Weight)))
			i--
			dAtA[i] = 0x12
		}
		if x.ReleaseTime != nil {
			encoded, err := options.Marshal(x.ReleaseTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*VestingSchedule)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VestingSchedule: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: VestingSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReleaseTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ReleaseTime == nil {
					x.ReleaseTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReleaseTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Weight = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: fundraising/fundraising/v1/auction.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AuctionType enumerates the valid types of an auction.
type AuctionType int32

const (
	// AUCTION_TYPE_UNSPECIFIED defines the default auction type
	AuctionType_AUCTION_TYPE_UNSPECIFIED AuctionType = 0
	// AUCTION_TYPE_FIXED_PRICE defines the fixed price auction type
	AuctionType_AUCTION_TYPE_FIXED_PRICE AuctionType = 1
	// AUCTION_TYPE_BATCH defines the batch auction type
	AuctionType_AUCTION_TYPE_BATCH AuctionType = 2
)

// Enum value maps for AuctionType.
var (
	AuctionType_name = map[int32]string{
		0: "AUCTION_TYPE_UNSPECIFIED",
		1: "AUCTION_TYPE_FIXED_PRICE",
		2: "AUCTION_TYPE_BATCH",
	}
	AuctionType_value = map[string]int32{
		"AUCTION_TYPE_UNSPECIFIED": 0,
		"AUCTION_TYPE_FIXED_PRICE": 1,
		"AUCTION_TYPE_BATCH":       2,
	}
)

func (x AuctionType) Enum() *AuctionType {
	p := new(AuctionType)
	*p = x
	return p
}

func (x AuctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_fundraising_fundraising_v1_auction_proto_enumTypes[0].Descriptor()
}

func (AuctionType) Type() protoreflect.EnumType {
	return &file_fundraising_fundraising_v1_auction_proto_enumTypes[0]
}

func (x AuctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuctionType.Descriptor instead.
func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return file_fundraising_fundraising_v1_auction_proto_rawDescGZIP(), []int{0}
}

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatus_AUCTION_STATUS_UNSPECIFIED AuctionStatus = 0
	// AUCTION_STATUS_STANDBY defines the standby auction status
	AuctionStatus_AUCTION_STATUS_STANDBY AuctionStatus = 1
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatus_AUCTION_STATUS_STARTED AuctionStatus = 2
	// AUCTION_STATUS_VESTING defines the vesting auction status
	AuctionStatus_AUCTION_STATUS_VESTING AuctionStatus = 3
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatus_AUCTION_STATUS_FINISHED AuctionStatus = 4
	// AUCTION_STATUS_CANCELLED defines the cancelled auction status
	AuctionStatus_AUCTION_STATUS_CANCELLED AuctionStatus = 5
)

// Enum value maps for AuctionStatus.
var (
	AuctionStatus_name = map[int32]string{
		0: "AUCTION_STATUS_UNSPECIFIED",
		1: "AUCTION_STATUS_STANDBY",
		2: "AUCTION_STATUS_STARTED",
		3: "AUCTION_STATUS_VESTING",
		4: "AUCTION_STATUS_FINISHED",
		5: "AUCTION_STATUS_CANCELLED",
	}
	AuctionStatus_value = map[string]int32{
		"AUCTION_STATUS_UNSPECIFIED": 0,
		"AUCTION_STATUS_STANDBY":     1,
		"AUCTION_STATUS_STARTED":     2,
		"AUCTION_STATUS_VESTING":     3,
		"AUCTION_STATUS_FINISHED":    4,
		"AUCTION_STATUS_CANCELLED":   5,
	}
)

func (x AuctionStatus) Enum() *AuctionStatus {
	p := new(AuctionStatus)
	*p = x
	return p
}

func (x AuctionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AuctionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_fundraising_fundraising_v1_auction_proto_enumTypes[1].Descriptor()
}

func (AuctionStatus) Type() protoreflect.EnumType {
	return &file_fundraising_fundraising_v1_auction_proto_enumTypes[1]
}

func (x AuctionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AuctionStatus.Descriptor instead.
func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return file_fundraising_fundraising_v1_auction_proto_rawDescGZIP(), []int{1}
}

// BaseAuction defines a base auction type. It contains all the necessary fields
// for basic auction functionality. Any custom auction type should extend this
// type for additional functionality (e.g. batch auction, fixed price
// auction).
type BaseAuction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id specifies index of the auction
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// type specifies the auction type
	// type 1 is fixed price and 2 is batch auction
	Type_ AuctionType `protobuf:"varint,2,opt,name=type,proto3,enum=fundraising.fundraising.v1.AuctionType" json:"type,omitempty"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,3,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// selling_reserve_address specifies the bech32-encoded address that has all
	// the selling coin
	SellingReserveAddress string `protobuf:"bytes,4,opt,name=selling_reserve_address,json=sellingReserveAddress,proto3" json:"selling_reserve_address,omitempty"`
	// paying_reserve_address specifies the bech32-encoded address that has all
	// the paying coin
	PayingReserveAddress string `protobuf:"bytes,5,opt,name=paying_reserve_address,json=payingReserveAddress,proto3" json:"paying_reserve_address,omitempty"`
	// start_price specifies the starting price of the auction
	// it is determined by the proportion of the price of paying coin denom
	StartPrice string `protobuf:"bytes,6,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	// selling_coin specifies the selling coin for the auction
	SellingCoin *v1beta1.Coin `protobuf:"bytes,7,opt,name=selling_coin,json=sellingCoin,proto3" json:"selling_coin,omitempty"`
	// paying_coin_denom specifies the paying coin denom that bidders use to bid
	// for
	PayingCoinDenom string `protobuf:"bytes,8,opt,name=paying_coin_denom,json=payingCoinDenom,proto3" json:"paying_coin_denom,omitempty"`
	// vesting_reserve_address specifies the bech32-encoded vesting address that
	// holds vesting amounts of coin
	VestingReserveAddress string `protobuf:"bytes,9,opt,name=vesting_reserve_address,json=vestingReserveAddress,proto3" json:"vesting_reserve_address,omitempty"`
	// vesting_schedules specifies the vesting schedules for the auction
	VestingSchedules []*VestingSchedule `protobuf:"bytes,10,rep,name=vesting_schedules,json=vestingSchedules,proto3" json:"vesting_schedules,omitempty"`
	// start_time specifies the start time of the plan
	StartTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// end_times specifies the end time of the plan
	EndTimes []*timestamppb.Timestamp `protobuf:"bytes,12,rep,name=end_times,json=endTimes,proto3" json:"end_times,omitempty"`
	// status specifies the auction status
	Status AuctionStatus `protobuf:"varint,13,opt,name=status,proto3,enum=fundraising.fundraising.v1.AuctionStatus" json:"status,omitempty"`
}

func (x *BaseAuction) Reset() {
	*x = BaseAuction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseAuction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseAuction) ProtoMessage() {}

// Deprecated: Use BaseAuction.ProtoReflect.Descriptor instead.
func (*BaseAuction) Descriptor() ([]byte, []int) {
	return file_fundraising_fundraising_v1_auction_proto_rawDescGZIP(), []int{0}
}

func (x *BaseAuction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseAuction) GetType_() AuctionType {
	if x != nil {
		return x.Type_
	}
	return AuctionType_AUCTION_TYPE_UNSPECIFIED
}

func (x *BaseAuction) GetAuctioneer() string {
	if x != nil {
		return x.Auctioneer
	}
	return ""
}

func (x *BaseAuction) GetSellingReserveAddress() string {
	if x != nil {
		return x.SellingReserveAddress
	}
	return ""
}

func (x *BaseAuction) GetPayingReserveAddress() string {
	if x != nil {
		return x.PayingReserveAddress
	}
	return ""
}

func (x *BaseAuction) GetStartPrice() string {
	if x != nil {
		return x.StartPrice
	}
	return ""
}

func (x *BaseAuction) GetSellingCoin() *v1beta1.Coin {
	if x != nil {
		return x.SellingCoin
	}
	return nil
}

func (x *BaseAuction) GetPayingCoinDenom() string {
	if x != nil {
		return x.PayingCoinDenom
	}
	return ""
}

func (x *BaseAuction) GetVestingReserveAddress() string {
	if x != nil {
		return x.VestingReserveAddress
	}
	return ""
}

func (x *BaseAuction) GetVestingSchedules() []*VestingSchedule {
	if x != nil {
		return x.VestingSchedules
	}
	return nil
}

func (x *BaseAuction) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BaseAuction) GetEndTimes() []*timestamppb.Timestamp {
	if x != nil {
		return x.EndTimes
	}
	return nil
}

func (x *BaseAuction) GetStatus() AuctionStatus {
	if x != nil {
		return x.Status
	}
	return AuctionStatus_AUCTION_STATUS_UNSPECIFIED
}

// FixedPriceAuction defines the fixed price auction type. It is the most
// simpliest way to raise funds. An auctioneer sets the starting price for each
// selling amounts of coin and bidders bid to purchase based on the fixed price.
type FixedPriceAuction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAuction *BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3" json:"base_auction,omitempty"`
	// remaining_coin specifies the remaining amount of selling coin to sell
	RemainingSellingCoin *v1beta1.Coin `protobuf:"bytes,2,opt,name=remaining_selling_coin,json=remainingSellingCoin,proto3" json:"remaining_selling_coin,omitempty"`
}

func (x *FixedPriceAuction) Reset() {
	*x = FixedPriceAuction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixedPriceAuction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixedPriceAuction) ProtoMessage() {}

// Deprecated: Use FixedPriceAuction.ProtoReflect.Descriptor instead.
func (*FixedPriceAuction) Descriptor() ([]byte, []int) {
	return file_fundraising_fundraising_v1_auction_proto_rawDescGZIP(), []int{1}
}

func (x *FixedPriceAuction) GetBaseAuction() *BaseAuction {
	if x != nil {
		return x.BaseAuction
	}
	return nil
}

func (x *FixedPriceAuction) GetRemainingSellingCoin() *v1beta1.Coin {
	if x != nil {
		return x.RemainingSellingCoin
	}
	return nil
}

// BatchAuction defines a batch auction type. It allows bidders to participate
// in the auction by placing their limit orders with a bid price they are
// willing to bid within the auction period. They can place multiple bids with
// different bid prices and if they want to modify their existing bid, they only
// have an option to modify with a higher bid price. Under the hood, an order
// book is created to record the bids to calculate the matched bidders.
type BatchAuction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseAuction *BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3" json:"base_auction,omitempty"`
	// min_bid_price specifies the minibum bid price
	MinBidPrice string `protobuf:"bytes,2,opt,name=min_bid_price,json=minBidPrice,proto3" json:"min_bid_price,omitempty"`
	// matched_price specifies the matched price of the auction
	MatchedPrice string `protobuf:"bytes,3,opt,name=matched_price,json=matchedPrice,proto3" json:"matched_price,omitempty"`
	// max_extended_round specifies a maximum number of extended rounds
	MaxExtendedRound uint32 `protobuf:"varint,4,opt,name=max_extended_round,json=maxExtendedRound,proto3" json:"max_extended_round,omitempty"`
	// extended_round_rate specifies the rate that decides if the auction needs
	// another round
	ExtendedRoundRate string `protobuf:"bytes,5,opt,name=extended_round_rate,json=extendedRoundRate,proto3" json:"extended_round_rate,omitempty"`
}

func (x *BatchAuction) Reset() {
	*x = BatchAuction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAuction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAuction) ProtoMessage() {}

// Deprecated: Use BatchAuction.ProtoReflect.Descriptor instead.
func (*BatchAuction) Descriptor() ([]byte, []int) {
	return file_fundraising_fundraising_v1_auction_proto_rawDescGZIP(), []int{2}
}

func (x *BatchAuction) GetBaseAuction() *BaseAuction {
	if x != nil {
		return x.BaseAuction
	}
	return nil
}

func (x *BatchAuction) GetMinBidPrice() string {
	if x != nil {
		return x.MinBidPrice
	}
	return ""
}

func (x *BatchAuction) GetMatchedPrice() string {
	if x != nil {
		return x.MatchedPrice
	}
	return ""
}

func (x *BatchAuction) GetMaxExtendedRound() uint32 {
	if x != nil {
		return x.MaxExtendedRound
	}
	return 0
}

func (x *BatchAuction) GetExtendedRoundRate() string {
	if x != nil {
		return x.ExtendedRoundRate
	}
	return ""
}

// VestingSchedule defines the vesting schedule for the owner of an auction.
type VestingSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// release_time specifies the time for distribution of the vesting coin
	ReleaseTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	// weight specifies the vesting weight for the schedule
	Weight string `protobuf:"bytes,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (x *VestingSchedule) Reset() {
	*x = VestingSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fundraising_fundraising_v1_auction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VestingSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VestingSchedule) ProtoMessage() {}

// Deprecated: Use VestingSchedule.ProtoReflect.Descriptor instead.
func (*VestingSchedule) Descriptor() ([]byte, []int) {
	return file_fundraising_fundraising_v1_auction_proto_rawDescGZIP(), []int{3}
}

func (x *VestingSchedule) GetReleaseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseTime
	}
	return nil
}

func (x *VestingSchedule) GetWeight() string {
	if x != nil {
		return x.Weight
	}
	return ""
}

var File_fundraising_fundraising_v1_auction_proto protoreflect.FileDescriptor

var file_fundraising_fundraising_v1_auction_proto_rawDesc = []byte{
	0x0a, 0x28, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x75,
	0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x66, 0x75, 0x6e, 0x64,
	0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x61, 0x6d, 0x69, 0x6e, 0x6f, 0x2f, 0x61, 0x6d,
	0x69, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x06, 0x0a, 0x0b,
	0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x66, 0x75, 0x6e, 0x64,
	0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x70, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f,
	0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69,
	0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63,
	0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0c, 0x73,
	0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x45, 0xc8, 0xde,
	0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x9a, 0xe7, 0xb0,
	0x2a, 0x0c, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0xa8, 0xe7,
	0xb0, 0x2a, 0x01, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x36, 0x0a, 0x17,
	0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x5e, 0x0a, 0x11, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75,
	0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x04, 0xc8, 0xde,
	0x1f, 0x00, 0x52, 0x10, 0x76, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf,
	0x1f, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x66,
	0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x72,
	0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x10, 0x88, 0xa0, 0x1f, 0x00, 0xca, 0xb4, 0x2d, 0x08, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x22, 0xee, 0x01, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75, 0x6e, 0x64,
	0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x04, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x0b, 0x62, 0x61,
	0x73, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x16, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x00, 0xaa, 0xdf, 0x1f, 0x27, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x69, 0x6e, 0x3a, 0x04, 0x88, 0xa0,
	0x1f, 0x00, 0x22, 0xa6, 0x03, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x66, 0x75, 0x6e, 0x64,
	0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x04, 0xd0, 0xde, 0x1f, 0x01, 0x52, 0x0b, 0x62, 0x61, 0x73, 0x65, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x64,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde,
	0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e,
	0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65,
	0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52,
	0x0b, 0x6d, 0x69, 0x6e, 0x42, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0d,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0c, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x61, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73,
	0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44,
	0x65, 0x63, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x61, 0x74, 0x65, 0x3a, 0x04, 0x88, 0xa0, 0x1f, 0x00, 0x22, 0xa5, 0x01, 0x0a, 0x0f,
	0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x47, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x06, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2a, 0xac, 0x01, 0x0a, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x18, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x1a, 0x12, 0x8a, 0x9d, 0x20, 0x0e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x69, 0x6c, 0x12, 0x37, 0x0a, 0x18, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x01, 0x1a, 0x19, 0x8a, 0x9d, 0x20, 0x15, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x78, 0x65, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x04, 0x88, 0xa3,
	0x1e, 0x00, 0x2a, 0xdf, 0x02, 0x0a, 0x0d, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x1a, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x1a, 0x14, 0x8a, 0x9d, 0x20, 0x10, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x69, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41,
	0x4e, 0x44, 0x42, 0x59, 0x10, 0x01, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x42, 0x79,
	0x12, 0x34, 0x0a, 0x16, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x18, 0x8a, 0x9d,
	0x20, 0x14, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x45, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x1a, 0x18, 0x8a, 0x9d, 0x20, 0x14, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x0a, 0x17,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x19, 0x8a, 0x9d, 0x20, 0x15, 0x41,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44,
	0x10, 0x05, 0x1a, 0x1a, 0x8a, 0x9d, 0x20, 0x16, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x1a, 0x04,
	0x88, 0xa3, 0x1e, 0x00, 0x42, 0x88, 0x02, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x75, 0x6e,
	0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x74, 0x2f, 0x66,
	0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x66, 0x75, 0x6e, 0x64, 0x72,
	0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x66, 0x75, 0x6e, 0x64, 0x72, 0x61,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x46, 0x58, 0xaa, 0x02, 0x1a,
	0x46, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x75, 0x6e, 0x64,
	0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1a, 0x46, 0x75, 0x6e,
	0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x46, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x26, 0x46, 0x75, 0x6e, 0x64, 0x72, 0x61,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x5c, 0x46, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e,
	0x67, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x1c, 0x46, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x3a, 0x3a,
	0x46, 0x75, 0x6e, 0x64, 0x72, 0x61, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fundraising_fundraising_v1_auction_proto_rawDescOnce sync.Once
	file_fundraising_fundraising_v1_auction_proto_rawDescData = file_fundraising_fundraising_v1_auction_proto_rawDesc
)

func file_fundraising_fundraising_v1_auction_proto_rawDescGZIP() []byte {
	file_fundraising_fundraising_v1_auction_proto_rawDescOnce.Do(func() {
		file_fundraising_fundraising_v1_auction_proto_rawDescData = protoimpl.X.CompressGZIP(file_fundraising_fundraising_v1_auction_proto_rawDescData)
	})
	return file_fundraising_fundraising_v1_auction_proto_rawDescData
}

var file_fundraising_fundraising_v1_auction_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_fundraising_fundraising_v1_auction_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_fundraising_fundraising_v1_auction_proto_goTypes = []interface{}{
	(AuctionType)(0),              // 0: fundraising.fundraising.v1.AuctionType
	(AuctionStatus)(0),            // 1: fundraising.fundraising.v1.AuctionStatus
	(*BaseAuction)(nil),           // 2: fundraising.fundraising.v1.BaseAuction
	(*FixedPriceAuction)(nil),     // 3: fundraising.fundraising.v1.FixedPriceAuction
	(*BatchAuction)(nil),          // 4: fundraising.fundraising.v1.BatchAuction
	(*VestingSchedule)(nil),       // 5: fundraising.fundraising.v1.VestingSchedule
	(*v1beta1.Coin)(nil),          // 6: cosmos.base.v1beta1.Coin
	(*timestamppb.Timestamp)(nil), // 7: google.protobuf.Timestamp
}
var file_fundraising_fundraising_v1_auction_proto_depIdxs = []int32{
	0,  // 0: fundraising.fundraising.v1.BaseAuction.type:type_name -> fundraising.fundraising.v1.AuctionType
	6,  // 1: fundraising.fundraising.v1.BaseAuction.selling_coin:type_name -> cosmos.base.v1beta1.Coin
	5,  // 2: fundraising.fundraising.v1.BaseAuction.vesting_schedules:type_name -> fundraising.fundraising.v1.VestingSchedule
	7,  // 3: fundraising.fundraising.v1.BaseAuction.start_time:type_name -> google.protobuf.Timestamp
	7,  // 4: fundraising.fundraising.v1.BaseAuction.end_times:type_name -> google.protobuf.Timestamp
	1,  // 5: fundraising.fundraising.v1.BaseAuction.status:type_name -> fundraising.fundraising.v1.AuctionStatus
	2,  // 6: fundraising.fundraising.v1.FixedPriceAuction.base_auction:type_name -> fundraising.fundraising.v1.BaseAuction
	6,  // 7: fundraising.fundraising.v1.FixedPriceAuction.remaining_selling_coin:type_name -> cosmos.base.v1beta1.Coin
	2,  // 8: fundraising.fundraising.v1.BatchAuction.base_auction:type_name -> fundraising.fundraising.v1.BaseAuction
	7,  // 9: fundraising.fundraising.v1.VestingSchedule.release_time:type_name -> google.protobuf.Timestamp
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_fundraising_fundraising_v1_auction_proto_init() }
func file_fundraising_fundraising_v1_auction_proto_init() {
	if File_fundraising_fundraising_v1_auction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fundraising_fundraising_v1_auction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseAuction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fundraising_fundraising_v1_auction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixedPriceAuction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fundraising_fundraising_v1_auction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAuction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fundraising_fundraising_v1_auction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VestingSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fundraising_fundraising_v1_auction_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fundraising_fundraising_v1_auction_proto_goTypes,
		DependencyIndexes: file_fundraising_fundraising_v1_auction_proto_depIdxs,
		EnumInfos:         file_fundraising_fundraising_v1_auction_proto_enumTypes,
		MessageInfos:      file_fundraising_fundraising_v1_auction_proto_msgTypes,
	}.Build()
	File_fundraising_fundraising_v1_auction_proto = out.File
	file_fundraising_fundraising_v1_auction_proto_rawDesc = nil
	file_fundraising_fundraising_v1_auction_proto_goTypes = nil
	file_fundraising_fundraising_v1_auction_proto_depIdxs = nil
}
