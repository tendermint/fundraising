// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fundraising/fundraising.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AuctionType enumerates the valid types of an auction.
type AuctionType int32

const (
	// AUCTION_TYPE_UNSPECIFIED defines the default auction type
	AuctionTypeNil AuctionType = 0
	// AUCTION_TYPE_FIXED_PRICE defines the fixed price auction type
	AuctionTypeFixedPrice AuctionType = 1
	// AUCTION_TYPE_BATCH defines the batch auction type
	AuctionTypeBatch AuctionType = 2
)

var AuctionType_name = map[int32]string{
	0: "AUCTION_TYPE_UNSPECIFIED",
	1: "AUCTION_TYPE_FIXED_PRICE",
	2: "AUCTION_TYPE_BATCH",
}

var AuctionType_value = map[string]int32{
	"AUCTION_TYPE_UNSPECIFIED": 0,
	"AUCTION_TYPE_FIXED_PRICE": 1,
	"AUCTION_TYPE_BATCH":       2,
}

func (x AuctionType) String() string {
	return proto.EnumName(AuctionType_name, int32(x))
}

func (AuctionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{0}
}

// AuctionStatus enumerates the valid status of an auction.
type AuctionStatus int32

const (
	// AUCTION_STATUS_UNSPECIFIED defines the default auction status
	AuctionStatusNil AuctionStatus = 0
	// AUCTION_STATUS_STANDBY defines the standby auction status
	AuctionStatusStandBy AuctionStatus = 1
	// AUCTION_STATUS_STARTED defines the started auction status
	AuctionStatusStarted AuctionStatus = 2
	// AUCTION_STATUS_VESTING defines the vesting auction status
	AuctionStatusVesting AuctionStatus = 3
	// AUCTION_STATUS_FINISHED defines the finished auction status
	AuctionStatusFinished AuctionStatus = 4
	// AUCTION_STATUS_CANCELLED defines the cancelled auction status
	AuctionStatusCancelled AuctionStatus = 5
)

var AuctionStatus_name = map[int32]string{
	0: "AUCTION_STATUS_UNSPECIFIED",
	1: "AUCTION_STATUS_STANDBY",
	2: "AUCTION_STATUS_STARTED",
	3: "AUCTION_STATUS_VESTING",
	4: "AUCTION_STATUS_FINISHED",
	5: "AUCTION_STATUS_CANCELLED",
}

var AuctionStatus_value = map[string]int32{
	"AUCTION_STATUS_UNSPECIFIED": 0,
	"AUCTION_STATUS_STANDBY":     1,
	"AUCTION_STATUS_STARTED":     2,
	"AUCTION_STATUS_VESTING":     3,
	"AUCTION_STATUS_FINISHED":    4,
	"AUCTION_STATUS_CANCELLED":   5,
}

func (x AuctionStatus) String() string {
	return proto.EnumName(AuctionStatus_name, int32(x))
}

func (AuctionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{1}
}

// BidType enumerates the valid types of a bid.
type BidType int32

const (
	// BID_TYPE_UNSPECIFIED defines the default bid type
	BidTypeNil BidType = 0
	// BID_TYPE_FIXED_PRICE defines a bid type for a fixed price auction type
	BidTypeFixedPrice BidType = 1
	// Bid_TYPE_BATCH_WORTH defines a bid type for How-Much-Worth-to-Buy of a
	// batch auction
	BidTypeBatchWorth BidType = 2
	// Bid_TYPE_BATCH_MANY defines a bid type for How-Many-Coins-to-Buy of a batch
	// auction
	BidTypeBatchMany BidType = 3
)

var BidType_name = map[int32]string{
	0: "BID_TYPE_UNSPECIFIED",
	1: "BID_TYPE_FIXED_PRICE",
	2: "Bid_TYPE_BATCH_WORTH",
	3: "Bid_TYPE_BATCH_MANY",
}

var BidType_value = map[string]int32{
	"BID_TYPE_UNSPECIFIED": 0,
	"BID_TYPE_FIXED_PRICE": 1,
	"Bid_TYPE_BATCH_WORTH": 2,
	"Bid_TYPE_BATCH_MANY":  3,
}

func (x BidType) String() string {
	return proto.EnumName(BidType_name, int32(x))
}

func (BidType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{2}
}

// AddressType enumerates the available types of a address.
type AddressType int32

const (
	// the 32 bytes length address type of ADR 028.
	AddressType32Bytes AddressType = 0
	// the default 20 bytes length address type.
	AddressType20Bytes AddressType = 1
)

var AddressType_name = map[int32]string{
	0: "ADDRESS_TYPE_32_BYTES",
	1: "ADDRESS_TYPE_20_BYTES",
}

var AddressType_value = map[string]int32{
	"ADDRESS_TYPE_32_BYTES": 0,
	"ADDRESS_TYPE_20_BYTES": 1,
}

func (x AddressType) String() string {
	return proto.EnumName(AddressType_name, int32(x))
}

func (AddressType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{3}
}

// Params defines the set of params for the fundraising module.
type Params struct {
	// auction_creation_fee specifies the fee for fundraising creation fee.
	// this prevents from spamming attack and it is collected in the community
	// pool
	AuctionCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=auction_creation_fee,json=auctionCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"auction_creation_fee" yaml:"auction_creation_fee"`
	// extended_period specifies the extended period that determines how long
	// the extended auction round lasts.
	ExtendedPeriod uint32 `protobuf:"varint,2,opt,name=extended_period,json=extendedPeriod,proto3" json:"extended_period,omitempty" yaml:"extended_period"`
	// fee_collector_address is the module account address to collect fees within
	// the module
	FeeCollectorAddress string `protobuf:"bytes,3,opt,name=fee_collector_address,json=feeCollectorAddress,proto3" json:"fee_collector_address,omitempty" yaml:"fee_collector_address"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// BaseAuction defines a base auction type. It contains all the necessary fields
// for basic auction functionality. Any custom auction type should extend this
// type for additional functionality (e.g. batch auction, fixed price
// auction).
type BaseAuction struct {
	// id specifies index of the auction
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// type specifies the auction type; type 1 is fixed price and 2 is batch
	// auction
	Type AuctionType `protobuf:"varint,2,opt,name=type,proto3,enum=tendermint.fundraising.AuctionType" json:"type,omitempty"`
	// allowed_bidders specifies the bidders who are allowed to bid for the
	// auction
	AllowedBidders []AllowedBidder `protobuf:"bytes,3,rep,name=allowed_bidders,json=allowedBidders,proto3" json:"allowed_bidders"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,4,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// selling_reserve_address specifies the bech32-encoded address that has all
	// the selling coin
	SellingReserveAddress string `protobuf:"bytes,5,opt,name=selling_reserve_address,json=sellingReserveAddress,proto3" json:"selling_reserve_address,omitempty"`
	// paying_reserve_address specifies the bech32-encoded address that has all
	// the paying coin
	PayingReserveAddress string `protobuf:"bytes,6,opt,name=paying_reserve_address,json=payingReserveAddress,proto3" json:"paying_reserve_address,omitempty"`
	// start_price specifies the starting price of the auction
	// it is determined by the proportion of the price of paying coin denom
	StartPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=start_price,json=startPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"start_price"`
	// selling_coin specifies the selling coin for the auction
	SellingCoin types.Coin `protobuf:"bytes,8,opt,name=selling_coin,json=sellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"selling_coin"`
	// paying_coin_denom specifies the paying coin denom that bidders use to bid
	// for
	PayingCoinDenom string `protobuf:"bytes,9,opt,name=paying_coin_denom,json=payingCoinDenom,proto3" json:"paying_coin_denom,omitempty"`
	// vesting_reserve_address specifies the bech32-encoded vesting address that
	// holds vesting amounts of coin
	VestingReserveAddress string `protobuf:"bytes,10,opt,name=vesting_reserve_address,json=vestingReserveAddress,proto3" json:"vesting_reserve_address,omitempty"`
	// vesting_schedules specifies the vesting schedules for the auction
	VestingSchedules []VestingSchedule `protobuf:"bytes,11,rep,name=vesting_schedules,json=vestingSchedules,proto3" json:"vesting_schedules"`
	// winning_price specifies the winning price of the auction
	WinningPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,12,opt,name=winning_price,json=winningPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"winning_price"`
	// current number of winning bidders
	NumWinningBidders uint64 `protobuf:"varint,13,opt,name=num_winning_bidders,json=numWinningBidders,proto3" json:"num_winning_bidders,omitempty"`
	// remaining_coin specifes the remaining amount of selling coin to sell
	RemainingSellingCoin types.Coin `protobuf:"bytes,14,opt,name=remaining_selling_coin,json=remainingSellingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"remaining_selling_coin"`
	// start_time specifies the start time of the plan
	StartTime time.Time `protobuf:"bytes,15,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// end_times specifies the end time of the plan
	EndTimes []time.Time `protobuf:"bytes,16,rep,name=end_times,json=endTimes,proto3,stdtime" json:"end_times"`
	// status specifies the auction status
	Status AuctionStatus `protobuf:"varint,17,opt,name=status,proto3,enum=tendermint.fundraising.AuctionStatus" json:"status,omitempty"`
}

func (m *BaseAuction) Reset()         { *m = BaseAuction{} }
func (m *BaseAuction) String() string { return proto.CompactTextString(m) }
func (*BaseAuction) ProtoMessage()    {}
func (*BaseAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{1}
}
func (m *BaseAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseAuction.Merge(m, src)
}
func (m *BaseAuction) XXX_Size() int {
	return m.Size()
}
func (m *BaseAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseAuction.DiscardUnknown(m)
}

var xxx_messageInfo_BaseAuction proto.InternalMessageInfo

// FixedPriceAuction defines the fixed price auction type. It is the most
// simpliest way to raise funds. An auctioneer sets the starting price for each
// selling amounts of coin and bidders bid to purchase based on the fixed price.
type FixedPriceAuction struct {
	*BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction,omitempty"`
}

func (m *FixedPriceAuction) Reset()         { *m = FixedPriceAuction{} }
func (m *FixedPriceAuction) String() string { return proto.CompactTextString(m) }
func (*FixedPriceAuction) ProtoMessage()    {}
func (*FixedPriceAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{2}
}
func (m *FixedPriceAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FixedPriceAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FixedPriceAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FixedPriceAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FixedPriceAuction.Merge(m, src)
}
func (m *FixedPriceAuction) XXX_Size() int {
	return m.Size()
}
func (m *FixedPriceAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_FixedPriceAuction.DiscardUnknown(m)
}

var xxx_messageInfo_FixedPriceAuction proto.InternalMessageInfo

// BatchAuction defines a batch auction type. It allows bidders to participate
// in the auction by placing their limit orders with a bid price they are
// willing to bid within the auction period. They can place multiple bids with
// different bid prices and if they want to modify their existing bid, they only
// have an option to modify with a higher bid price. Under the hood, an order
// book is created to record the bids to calculate winners.
type BatchAuction struct {
	*BaseAuction `protobuf:"bytes,1,opt,name=base_auction,json=baseAuction,proto3,embedded=base_auction" json:"base_auction,omitempty"`
	// max_extended_round specifies a maximum number of extended rounds
	MaxExtendedRound uint32 `protobuf:"varint,2,opt,name=max_extended_round,json=maxExtendedRound,proto3" json:"max_extended_round,omitempty"`
	// extended_round_rate specifies the rate that decides if the auction needs
	// another round
	ExtendedRoundRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=extended_round_rate,json=extendedRoundRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"extended_round_rate"`
}

func (m *BatchAuction) Reset()         { *m = BatchAuction{} }
func (m *BatchAuction) String() string { return proto.CompactTextString(m) }
func (*BatchAuction) ProtoMessage()    {}
func (*BatchAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{3}
}
func (m *BatchAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchAuction.Merge(m, src)
}
func (m *BatchAuction) XXX_Size() int {
	return m.Size()
}
func (m *BatchAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchAuction.DiscardUnknown(m)
}

var xxx_messageInfo_BatchAuction proto.InternalMessageInfo

// VestingSchedule defines the vesting schedule for the owner of an auction.
type VestingSchedule struct {
	// release_time specifies the time for distribution of the vesting coin
	ReleaseTime time.Time `protobuf:"bytes,1,opt,name=release_time,json=releaseTime,proto3,stdtime" json:"release_time"`
	// weight specifies the vesting weight for the schedule
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
}

func (m *VestingSchedule) Reset()         { *m = VestingSchedule{} }
func (m *VestingSchedule) String() string { return proto.CompactTextString(m) }
func (*VestingSchedule) ProtoMessage()    {}
func (*VestingSchedule) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{4}
}
func (m *VestingSchedule) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingSchedule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingSchedule.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingSchedule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingSchedule.Merge(m, src)
}
func (m *VestingSchedule) XXX_Size() int {
	return m.Size()
}
func (m *VestingSchedule) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingSchedule.DiscardUnknown(m)
}

var xxx_messageInfo_VestingSchedule proto.InternalMessageInfo

func (m *VestingSchedule) GetReleaseTime() time.Time {
	if m != nil {
		return m.ReleaseTime
	}
	return time.Time{}
}

// VestingQueue defines the vesting queue.
type VestingQueue struct {
	// auction_id specifes the id of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// auctioneer specifies the bech32-encoded address that creates the auction
	Auctioneer string `protobuf:"bytes,2,opt,name=auctioneer,proto3" json:"auctioneer,omitempty"`
	// paying_coin specifies the paying amount of coin
	PayingCoin types.Coin `protobuf:"bytes,3,opt,name=paying_coin,json=payingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"paying_coin"`
	// release_time specifies the timestamp of the vesting schedule
	ReleaseTime time.Time `protobuf:"bytes,4,opt,name=release_time,json=releaseTime,proto3,stdtime" json:"release_time"`
	// released specifies the status of distribution
	Released bool `protobuf:"varint,5,opt,name=released,proto3" json:"released,omitempty"`
}

func (m *VestingQueue) Reset()         { *m = VestingQueue{} }
func (m *VestingQueue) String() string { return proto.CompactTextString(m) }
func (*VestingQueue) ProtoMessage()    {}
func (*VestingQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{5}
}
func (m *VestingQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VestingQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VestingQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VestingQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VestingQueue.Merge(m, src)
}
func (m *VestingQueue) XXX_Size() int {
	return m.Size()
}
func (m *VestingQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_VestingQueue.DiscardUnknown(m)
}

var xxx_messageInfo_VestingQueue proto.InternalMessageInfo

func (m *VestingQueue) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *VestingQueue) GetAuctioneer() string {
	if m != nil {
		return m.Auctioneer
	}
	return ""
}

func (m *VestingQueue) GetPayingCoin() types.Coin {
	if m != nil {
		return m.PayingCoin
	}
	return types.Coin{}
}

func (m *VestingQueue) GetReleaseTime() time.Time {
	if m != nil {
		return m.ReleaseTime
	}
	return time.Time{}
}

func (m *VestingQueue) GetReleased() bool {
	if m != nil {
		return m.Released
	}
	return false
}

// AllowedBidder defines an allowed bidder for the auction.
type AllowedBidder struct {
	// bidder specifies the bech32-encoded address that bids for the auction
	Bidder string `protobuf:"bytes,1,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// max_bid_amount specifies the maximum bid amount that the bidder can bid
	MaxBidAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=max_bid_amount,json=maxBidAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"max_bid_amount"`
}

func (m *AllowedBidder) Reset()         { *m = AllowedBidder{} }
func (m *AllowedBidder) String() string { return proto.CompactTextString(m) }
func (*AllowedBidder) ProtoMessage()    {}
func (*AllowedBidder) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{6}
}
func (m *AllowedBidder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllowedBidder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllowedBidder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllowedBidder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllowedBidder.Merge(m, src)
}
func (m *AllowedBidder) XXX_Size() int {
	return m.Size()
}
func (m *AllowedBidder) XXX_DiscardUnknown() {
	xxx_messageInfo_AllowedBidder.DiscardUnknown(m)
}

var xxx_messageInfo_AllowedBidder proto.InternalMessageInfo

func (m *AllowedBidder) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

// Bid defines a standard bid for an auction.
type Bid struct {
	// auction_id specifies the id of the auction
	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// bidder specifies the bech32-encoded address that bids for the auction
	Bidder string `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	// id specifies an index of a bid for the bidder
	Id uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// type specifies the bid type; type 1 is fixed price, 2 is how-much-worth, 3
	// is how-many-coins
	BidType BidType `protobuf:"varint,4,opt,name=bid_type,json=bidType,proto3,enum=tendermint.fundraising.BidType" json:"bid_type,omitempty"`
	// bid_price specifies the bid price in which price the bidder places the bid
	BidPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=bid_price,json=bidPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"bid_price"`
	// bid_coin specifies the amount of coin that the bidder bids
	// for a fixed price auction, the denom is of the paying coin.
	// for a batch auction of how-much-worth, the denom is of the paying coin.
	// for a batch auction of how-many-coins, the denom is of the selling coin.
	BidCoin types.Coin `protobuf:"bytes,6,opt,name=bid_coin,json=bidCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"bid_coin"`
	// paying_coin specifies the paying amount of coin that the bidder bids
	// for a fixed price auction, paying_coin = bid_coin.
	// for a batch auction of how-much-worth, paying_coin = bid_coin.
	// for a batch auction of how-many-coins, paying_coin = bid_coin x bid_price.
	PayingCoin types.Coin `protobuf:"bytes,7,opt,name=paying_coin,json=payingCoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"paying_coin"`
	// height specifies the block height of the bid
	Height uint64 `protobuf:"varint,8,opt,name=height,proto3" json:"height,omitempty"`
	// isWinner specifies the bid that is a winning bid and enables the bidder to
	// purchase the selling coin
	IsWinner bool `protobuf:"varint,9,opt,name=isWinner,proto3" json:"isWinner,omitempty"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97a388085f27061, []int{7}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bid) GetBidType() BidType {
	if m != nil {
		return m.BidType
	}
	return BidTypeNil
}

func (m *Bid) GetBidCoin() types.Coin {
	if m != nil {
		return m.BidCoin
	}
	return types.Coin{}
}

func (m *Bid) GetPayingCoin() types.Coin {
	if m != nil {
		return m.PayingCoin
	}
	return types.Coin{}
}

func (m *Bid) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Bid) GetIsWinner() bool {
	if m != nil {
		return m.IsWinner
	}
	return false
}

func init() {
	proto.RegisterEnum("tendermint.fundraising.AuctionType", AuctionType_name, AuctionType_value)
	proto.RegisterEnum("tendermint.fundraising.AuctionStatus", AuctionStatus_name, AuctionStatus_value)
	proto.RegisterEnum("tendermint.fundraising.BidType", BidType_name, BidType_value)
	proto.RegisterEnum("tendermint.fundraising.AddressType", AddressType_name, AddressType_value)
	proto.RegisterType((*Params)(nil), "tendermint.fundraising.Params")
	proto.RegisterType((*BaseAuction)(nil), "tendermint.fundraising.BaseAuction")
	proto.RegisterType((*FixedPriceAuction)(nil), "tendermint.fundraising.FixedPriceAuction")
	proto.RegisterType((*BatchAuction)(nil), "tendermint.fundraising.BatchAuction")
	proto.RegisterType((*VestingSchedule)(nil), "tendermint.fundraising.VestingSchedule")
	proto.RegisterType((*VestingQueue)(nil), "tendermint.fundraising.VestingQueue")
	proto.RegisterType((*AllowedBidder)(nil), "tendermint.fundraising.AllowedBidder")
	proto.RegisterType((*Bid)(nil), "tendermint.fundraising.Bid")
}

func init() { proto.RegisterFile("fundraising/fundraising.proto", fileDescriptor_a97a388085f27061) }

var fileDescriptor_a97a388085f27061 = []byte{
	// 1543 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4f, 0x6f, 0x1a, 0xd7,
	0x16, 0x67, 0x30, 0xc1, 0x70, 0xc1, 0x78, 0x7c, 0x6d, 0xf3, 0x08, 0xef, 0x05, 0x46, 0x3c, 0xa5,
	0xb1, 0xa2, 0x06, 0x12, 0x27, 0x6d, 0x2a, 0x4b, 0x5d, 0x30, 0x80, 0x13, 0xd4, 0x04, 0xbb, 0x33,
	0x93, 0xa4, 0xce, 0xa2, 0xa3, 0x81, 0x7b, 0x8d, 0x47, 0x61, 0x66, 0xac, 0x99, 0xc1, 0x31, 0x8b,
	0x4a, 0x5d, 0x46, 0xac, 0xb2, 0xac, 0xd4, 0xa2, 0x46, 0xed, 0x2e, 0xea, 0xb2, 0x1f, 0x22, 0xaa,
	0xba, 0x88, 0xba, 0xaa, 0x2a, 0xd5, 0xae, 0x92, 0x2f, 0x50, 0xe5, 0x13, 0x54, 0xf7, 0x0f, 0x78,
	0xc0, 0xb8, 0x49, 0xac, 0x64, 0xc5, 0xdc, 0x73, 0xce, 0xef, 0xdc, 0x73, 0xcf, 0xf9, 0xdd, 0x73,
	0x2e, 0xe0, 0xdc, 0x76, 0xd7, 0x46, 0xae, 0x61, 0x7a, 0xa6, 0xdd, 0x2e, 0x05, 0xbe, 0x8b, 0xbb,
	0xae, 0xe3, 0x3b, 0x30, 0xed, 0x63, 0x1b, 0x61, 0xd7, 0x32, 0x6d, 0xbf, 0x18, 0xd0, 0x66, 0x73,
	0x2d, 0xc7, 0xb3, 0x1c, 0xaf, 0xd4, 0x34, 0x3c, 0x5c, 0xda, 0xbb, 0xd2, 0xc4, 0xbe, 0x71, 0xa5,
	0xd4, 0x72, 0x4c, 0x9b, 0xe1, 0xb2, 0x67, 0x99, 0x5e, 0xa7, 0xab, 0x12, 0x5b, 0x70, 0xd5, 0x52,
	0xdb, 0x69, 0x3b, 0x4c, 0x4e, 0xbe, 0xb8, 0x34, 0xdf, 0x76, 0x9c, 0x76, 0x07, 0x97, 0xe8, 0xaa,
	0xd9, 0xdd, 0x2e, 0xf9, 0xa6, 0x85, 0x3d, 0xdf, 0xb0, 0x76, 0x99, 0x41, 0xe1, 0xd7, 0x30, 0x88,
	0x6e, 0x1a, 0xae, 0x61, 0x79, 0xf0, 0x3b, 0x01, 0x2c, 0x19, 0xdd, 0x96, 0x6f, 0x3a, 0xb6, 0xde,
	0x72, 0xb1, 0x41, 0x3f, 0xb6, 0x31, 0xce, 0x08, 0xd2, 0xcc, 0x4a, 0x62, 0xf5, 0x6c, 0x91, 0xef,
	0x47, 0x82, 0x2b, 0xf2, 0xe0, 0x8a, 0x15, 0xc7, 0xb4, 0xe5, 0x8d, 0x67, 0x07, 0xf9, 0xd0, 0xab,
	0x83, 0xfc, 0x7f, 0x7b, 0x86, 0xd5, 0x59, 0x2b, 0x4c, 0x73, 0x52, 0x78, 0x7a, 0x98, 0x5f, 0x69,
	0x9b, 0xfe, 0x4e, 0xb7, 0x59, 0x6c, 0x39, 0x16, 0x8f, 0x9d, 0xff, 0x5c, 0xf2, 0xd0, 0x83, 0x92,
	0xdf, 0xdb, 0xc5, 0x1e, 0xf5, 0xe7, 0x29, 0x90, 0xbb, 0xa8, 0x70, 0x0f, 0xeb, 0x18, 0xc3, 0x0a,
	0x98, 0xc7, 0xfb, 0x34, 0x6f, 0x48, 0xdf, 0xc5, 0xae, 0xe9, 0xa0, 0x4c, 0x58, 0x12, 0x56, 0xe6,
	0xe4, 0xec, 0xab, 0x83, 0x7c, 0x9a, 0xed, 0x3c, 0x61, 0x50, 0x50, 0x52, 0x43, 0xc9, 0x26, 0x15,
	0x40, 0x0d, 0x2c, 0x6f, 0x63, 0xac, 0xb7, 0x9c, 0x4e, 0x07, 0xb7, 0x7c, 0xc7, 0xd5, 0x0d, 0x84,
	0x5c, 0xec, 0x79, 0x99, 0x19, 0x49, 0x58, 0x89, 0xcb, 0xd2, 0xab, 0x83, 0xfc, 0xff, 0x98, 0xab,
	0xa9, 0x66, 0x05, 0x65, 0x71, 0x1b, 0xe3, 0xca, 0x50, 0x5c, 0x66, 0xd2, 0xb5, 0xd8, 0xa3, 0x27,
	0xf9, 0xd0, 0x37, 0x4f, 0xf2, 0xa1, 0xc2, 0xb7, 0x71, 0x90, 0x90, 0x0d, 0x0f, 0x97, 0x59, 0xfc,
	0x30, 0x05, 0xc2, 0x26, 0xca, 0x08, 0x92, 0xb0, 0x12, 0x51, 0xc2, 0x26, 0x82, 0xd7, 0x41, 0x84,
	0x9c, 0x93, 0x46, 0x9e, 0x5a, 0xfd, 0x7f, 0x71, 0x3a, 0x0f, 0x8a, 0x1c, 0xae, 0xf5, 0x76, 0xb1,
	0x42, 0x01, 0x50, 0x03, 0xf3, 0x46, 0xa7, 0xe3, 0x3c, 0xc4, 0x48, 0x6f, 0x9a, 0x08, 0x61, 0x97,
	0x84, 0x4c, 0xca, 0x72, 0xfe, 0x44, 0x1f, 0xcc, 0x5c, 0xa6, 0xd6, 0x72, 0x84, 0x94, 0x48, 0x49,
	0x19, 0x41, 0xa1, 0x07, 0x73, 0x00, 0xf0, 0x4c, 0x63, 0xec, 0x66, 0x22, 0x24, 0x07, 0x4a, 0x40,
	0x02, 0x3f, 0x06, 0xff, 0xf1, 0x70, 0xa7, 0x63, 0xda, 0x6d, 0xdd, 0xc5, 0x1e, 0x76, 0xf7, 0xf0,
	0x28, 0x61, 0x67, 0xa8, 0xf1, 0x32, 0x57, 0x2b, 0x4c, 0xcb, 0x13, 0x02, 0xaf, 0x81, 0xf4, 0xae,
	0xd1, 0x9b, 0x06, 0x8b, 0x52, 0xd8, 0x12, 0xd3, 0x4e, 0xa0, 0x36, 0x40, 0xc2, 0xf3, 0x0d, 0xd7,
	0xd7, 0x77, 0x5d, 0xb3, 0x85, 0x33, 0xb3, 0xb4, 0x24, 0x45, 0x12, 0xf8, 0x1f, 0x07, 0xf9, 0x0f,
	0xde, 0x80, 0x3c, 0x55, 0xdc, 0x52, 0x00, 0x75, 0xb1, 0x49, 0x3c, 0x40, 0x0b, 0x24, 0x87, 0xe1,
	0x93, 0x4b, 0x94, 0x89, 0x49, 0xc2, 0xbf, 0x13, 0xb9, 0x44, 0x36, 0x7b, 0x7a, 0x98, 0xbf, 0xf0,
	0x86, 0x4c, 0x55, 0x12, 0xdc, 0x3f, 0x59, 0xc0, 0x8b, 0x60, 0x81, 0x9f, 0x9a, 0xec, 0xa6, 0x23,
	0x6c, 0x3b, 0x56, 0x26, 0x4e, 0x0f, 0x3c, 0xcf, 0x14, 0xc4, 0xac, 0x4a, 0xc4, 0x24, 0xb3, 0x7b,
	0xd8, 0xf3, 0xa7, 0xa5, 0x08, 0xb0, 0xcc, 0x72, 0xf5, 0x44, 0x8e, 0xee, 0x83, 0x85, 0x21, 0xce,
	0x6b, 0xed, 0x60, 0xd4, 0xed, 0x60, 0x2f, 0x93, 0xa0, 0x4c, 0xb8, 0x70, 0x12, 0x13, 0xee, 0x32,
	0x80, 0xca, 0xed, 0x39, 0x17, 0xc4, 0xbd, 0x71, 0xb1, 0x07, 0x55, 0x30, 0xf7, 0xd0, 0xb4, 0x6d,
	0xe2, 0x9b, 0x55, 0x20, 0x79, 0xaa, 0x0a, 0x24, 0xb9, 0x13, 0x56, 0x83, 0x22, 0x58, 0xb4, 0xbb,
	0x96, 0x3e, 0x74, 0x3c, 0x24, 0xef, 0x1c, 0xbd, 0x12, 0x0b, 0x76, 0xd7, 0xba, 0xc7, 0x34, 0x43,
	0x4a, 0x7e, 0x2d, 0x80, 0xb4, 0x8b, 0x2d, 0xc3, 0xa4, 0xe6, 0x63, 0xe5, 0x4b, 0xbd, 0xf3, 0xf2,
	0x2d, 0x8d, 0x76, 0x52, 0x03, 0x75, 0xac, 0x00, 0x46, 0x22, 0x9d, 0x34, 0xcb, 0xcc, 0x3c, 0xdd,
	0x35, 0x5b, 0x64, 0x9d, 0xb4, 0x38, 0xec, 0xa4, 0x45, 0x6d, 0xd8, 0x49, 0xe5, 0x18, 0xd9, 0xf6,
	0xf1, 0x61, 0x5e, 0x50, 0xe2, 0x14, 0x47, 0x34, 0xb0, 0x0c, 0xe2, 0xd8, 0x46, 0xd4, 0x85, 0x97,
	0x11, 0x69, 0x81, 0xde, 0xcc, 0x47, 0x0c, 0xdb, 0x88, 0xca, 0xe1, 0xa7, 0x20, 0xea, 0xf9, 0x86,
	0xdf, 0xf5, 0x32, 0x0b, 0xb4, 0x5d, 0x9c, 0x7f, 0x4d, 0xbb, 0x50, 0xa9, 0xb1, 0xc2, 0x41, 0x6b,
	0x22, 0xe9, 0x4a, 0xbf, 0xfd, 0x7c, 0x29, 0xc6, 0xd5, 0xf5, 0x42, 0x1b, 0x2c, 0xac, 0x9b, 0xfb,
	0x18, 0xd1, 0xca, 0x0c, 0x5b, 0xd4, 0x2d, 0x90, 0x24, 0x99, 0xd4, 0xf9, 0xb5, 0xa7, 0xcd, 0x2a,
	0x71, 0x72, 0x6b, 0x0a, 0x74, 0x37, 0x39, 0xf2, 0xfc, 0x20, 0x2f, 0x28, 0x89, 0xe6, 0x91, 0x68,
	0x2d, 0x42, 0x36, 0x2d, 0xfc, 0x2d, 0x80, 0xa4, 0x6c, 0xf8, 0xad, 0x9d, 0xf7, 0xb2, 0x09, 0xfc,
	0x10, 0x40, 0xcb, 0xd8, 0xd7, 0x47, 0xdd, 0xde, 0x75, 0xba, 0x36, 0x9f, 0x06, 0x8a, 0x68, 0x19,
	0xfb, 0x35, 0xae, 0x50, 0x88, 0x1c, 0x7e, 0x09, 0x16, 0xc7, 0x2d, 0x75, 0xd7, 0xf0, 0x31, 0xef,
	0xf8, 0x6f, 0x4b, 0xee, 0x05, 0x1c, 0xf4, 0xad, 0x18, 0x3e, 0xe6, 0x47, 0xfe, 0x41, 0x00, 0xf3,
	0x13, 0x17, 0x0d, 0xde, 0x00, 0x49, 0x17, 0x77, 0x30, 0x39, 0x38, 0xa5, 0x92, 0xf0, 0x16, 0x54,
	0x4a, 0x70, 0x24, 0x25, 0xd3, 0x3a, 0x88, 0x3e, 0xc4, 0x66, 0x7b, 0xc7, 0xa7, 0x87, 0x7c, 0xfb,
	0xa8, 0x39, 0xba, 0xf0, 0x7d, 0x18, 0x24, 0x79, 0x90, 0x9f, 0x77, 0x71, 0x17, 0xc3, 0x73, 0xa3,
	0x01, 0xa0, 0x8f, 0xe6, 0x54, 0x9c, 0x4b, 0xea, 0x68, 0x62, 0x3e, 0x84, 0x8f, 0xcd, 0x87, 0x07,
	0x20, 0x11, 0xe8, 0x78, 0x34, 0xa5, 0xef, 0xf6, 0x82, 0x82, 0xa3, 0xbe, 0x79, 0x2c, 0x9b, 0x91,
	0xd3, 0x66, 0x33, 0x0b, 0x62, 0x7c, 0x89, 0xe8, 0x18, 0x8b, 0x29, 0xa3, 0x75, 0xe1, 0x2b, 0x30,
	0x37, 0x36, 0x38, 0x61, 0x1a, 0x44, 0x59, 0xcf, 0xa2, 0xd9, 0x89, 0x2b, 0x7c, 0x05, 0x35, 0x90,
	0x22, 0x1c, 0x6c, 0x9a, 0x48, 0x37, 0x2c, 0xa7, 0x6b, 0x9f, 0xa6, 0x34, 0x75, 0xdb, 0x57, 0x92,
	0x96, 0xb1, 0x2f, 0x9b, 0xa8, 0x4c, 0x7d, 0x14, 0xfe, 0x9c, 0x01, 0x33, 0xb2, 0x89, 0x5e, 0x57,
	0x97, 0xa3, 0xa0, 0xc2, 0x63, 0x41, 0xb1, 0xe7, 0xc6, 0xcc, 0xe8, 0xb9, 0xb1, 0x06, 0x62, 0x24,
	0x40, 0xfa, 0xe4, 0x88, 0xd0, 0x1e, 0x92, 0x3f, 0xf1, 0xca, 0x99, 0x88, 0x3e, 0x37, 0x66, 0x9b,
	0xec, 0x03, 0x7e, 0x06, 0xe2, 0x04, 0xcb, 0x26, 0xc1, 0x99, 0x53, 0xd1, 0x8e, 0x6c, 0xce, 0xa6,
	0x00, 0x66, 0x81, 0x50, 0x96, 0x44, 0xdf, 0x39, 0x4b, 0x48, 0xcc, 0x94, 0x22, 0x13, 0x7c, 0x9c,
	0x7d, 0xaf, 0x7c, 0x4c, 0x83, 0xe8, 0x0e, 0xbb, 0x94, 0x31, 0x9a, 0x70, 0xbe, 0x22, 0xf4, 0x32,
	0x3d, 0x32, 0xd5, 0xb0, 0x4b, 0xa7, 0x7f, 0x4c, 0x19, 0xad, 0x2f, 0xfe, 0x24, 0x80, 0x44, 0xe0,
	0x71, 0x07, 0x2f, 0x83, 0x4c, 0xf9, 0x4e, 0x45, 0xab, 0x6f, 0x34, 0x74, 0x6d, 0x6b, 0xb3, 0xa6,
	0xdf, 0x69, 0xa8, 0x9b, 0xb5, 0x4a, 0x7d, 0xbd, 0x5e, 0xab, 0x8a, 0xa1, 0x2c, 0xec, 0x0f, 0xa4,
	0x54, 0xc0, 0xbc, 0x61, 0x76, 0xe0, 0xf5, 0x09, 0xc4, 0x7a, 0xfd, 0x8b, 0x5a, 0x55, 0xdf, 0x54,
	0xea, 0x95, 0x9a, 0x28, 0x64, 0xcf, 0xf6, 0x07, 0xd2, 0x72, 0x00, 0x71, 0xd4, 0xee, 0x49, 0xd3,
	0x1c, 0x03, 0xca, 0x65, 0xad, 0x72, 0x53, 0x0c, 0x67, 0x97, 0xfa, 0x03, 0x49, 0x0c, 0x40, 0x68,
	0xdf, 0xce, 0x46, 0x1e, 0xfd, 0x98, 0x0b, 0x5d, 0x3c, 0x0c, 0x83, 0xb9, 0xb1, 0xe1, 0x02, 0xaf,
	0x81, 0xec, 0xd0, 0x8b, 0xaa, 0x95, 0xb5, 0x3b, 0xea, 0x44, 0xc8, 0x41, 0x6f, 0x0c, 0x42, 0x82,
	0xbe, 0x06, 0xd2, 0x13, 0x28, 0x55, 0x2b, 0x37, 0xaa, 0xf2, 0x96, 0x28, 0x64, 0x33, 0xfd, 0x81,
	0xb4, 0x34, 0x86, 0x50, 0x7d, 0xc3, 0x46, 0x72, 0x6f, 0x3a, 0x4a, 0xd1, 0x6a, 0x55, 0x31, 0x3c,
	0x1d, 0xe5, 0xfa, 0x18, 0x4d, 0x41, 0xdd, 0xad, 0xa9, 0x5a, 0xbd, 0x71, 0x43, 0x9c, 0x99, 0x82,
	0xe2, 0xdd, 0x90, 0xbc, 0xc7, 0x26, 0x50, 0xeb, 0xf5, 0x46, 0x5d, 0xbd, 0x59, 0xab, 0x8a, 0x91,
	0xb1, 0xac, 0x32, 0xd8, 0xba, 0x69, 0x9b, 0xde, 0x0e, 0x46, 0xf0, 0x93, 0xa3, 0x72, 0x70, 0x5c,
	0xa5, 0xdc, 0xa8, 0xd4, 0x6e, 0xdd, 0xaa, 0x55, 0xc5, 0x33, 0xd9, 0x6c, 0x7f, 0x20, 0xa5, 0xc7,
	0x80, 0x15, 0xc3, 0x6e, 0xe1, 0x4e, 0x07, 0x23, 0x9e, 0xe1, 0x5f, 0x04, 0x30, 0xcb, 0xaf, 0x1e,
	0x5c, 0x01, 0x4b, 0x72, 0xbd, 0x3a, 0x8d, 0x08, 0xa9, 0xfe, 0x40, 0x02, 0xdc, 0x8c, 0xe4, 0xb3,
	0x14, 0xb0, 0x1c, 0x27, 0xc0, 0x72, 0x7f, 0x20, 0x2d, 0x70, 0xcb, 0x40, 0xf1, 0x09, 0xc0, 0x44,
	0x81, 0xc2, 0xeb, 0xf7, 0x36, 0x14, 0x8d, 0x94, 0x3f, 0x08, 0xa0, 0xa5, 0xbf, 0xe7, 0xb8, 0xfe,
	0x0e, 0xbc, 0x04, 0x16, 0x27, 0x00, 0xb7, 0xcb, 0x8d, 0x2d, 0x71, 0x86, 0x15, 0x38, 0x68, 0x7f,
	0xdb, 0xb0, 0x7b, 0xfc, 0x30, 0x3d, 0x90, 0xe0, 0xef, 0x54, 0x7a, 0x9e, 0x2b, 0x60, 0xb9, 0x5c,
	0xad, 0x2a, 0x35, 0x55, 0x65, 0x7e, 0xae, 0xae, 0xea, 0xf2, 0x96, 0x56, 0x53, 0xc5, 0x50, 0x36,
	0xdd, 0x1f, 0x48, 0x30, 0x60, 0x7b, 0x75, 0x55, 0xee, 0xf9, 0xd8, 0x3b, 0x06, 0x59, 0xbd, 0xcc,
	0x21, 0xc2, 0x31, 0xc8, 0xea, 0x65, 0x0a, 0x61, 0x5b, 0xcb, 0x1b, 0xcf, 0x5e, 0xe4, 0x84, 0xe7,
	0x2f, 0x72, 0xc2, 0x5f, 0x2f, 0x72, 0xc2, 0xe3, 0x97, 0xb9, 0xd0, 0xf3, 0x97, 0xb9, 0xd0, 0xef,
	0x2f, 0x73, 0xa1, 0xfb, 0x1f, 0x05, 0xee, 0xf6, 0x51, 0xef, 0x0b, 0xfe, 0x29, 0x2f, 0xed, 0x8f,
	0xad, 0xe8, 0x75, 0x6f, 0x46, 0xe9, 0x3c, 0xb9, 0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19,
	0x19, 0x48, 0xf4, 0xca, 0x0f, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeCollectorAddress) > 0 {
		i -= len(m.FeeCollectorAddress)
		copy(dAtA[i:], m.FeeCollectorAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.FeeCollectorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ExtendedPeriod != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.ExtendedPeriod))
		i--
		dAtA[i] = 0x10
	}
	if len(m.AuctionCreationFee) > 0 {
		for iNdEx := len(m.AuctionCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AuctionCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFundraising(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BaseAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.EndTimes) > 0 {
		for iNdEx := len(m.EndTimes) - 1; iNdEx >= 0; iNdEx-- {
			n, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTimes[iNdEx], dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTimes[iNdEx]):])
			if err != nil {
				return 0, err
			}
			i -= n
			i = encodeVarintFundraising(dAtA, i, uint64(n))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintFundraising(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x7a
	{
		size, err := m.RemainingSellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if m.NumWinningBidders != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.NumWinningBidders))
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.WinningPrice.Size()
		i -= size
		if _, err := m.WinningPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.VestingSchedules) > 0 {
		for iNdEx := len(m.VestingSchedules) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.VestingSchedules[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFundraising(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.VestingReserveAddress) > 0 {
		i -= len(m.VestingReserveAddress)
		copy(dAtA[i:], m.VestingReserveAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.VestingReserveAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.PayingCoinDenom) > 0 {
		i -= len(m.PayingCoinDenom)
		copy(dAtA[i:], m.PayingCoinDenom)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.PayingCoinDenom)))
		i--
		dAtA[i] = 0x4a
	}
	{
		size, err := m.SellingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.StartPrice.Size()
		i -= size
		if _, err := m.StartPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.PayingReserveAddress) > 0 {
		i -= len(m.PayingReserveAddress)
		copy(dAtA[i:], m.PayingReserveAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.PayingReserveAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SellingReserveAddress) > 0 {
		i -= len(m.SellingReserveAddress)
		copy(dAtA[i:], m.SellingReserveAddress)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.SellingReserveAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AllowedBidders) > 0 {
		for iNdEx := len(m.AllowedBidders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AllowedBidders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFundraising(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Type != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FixedPriceAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FixedPriceAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FixedPriceAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaseAuction != nil {
		{
			size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFundraising(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExtendedRoundRate.Size()
		i -= size
		if _, err := m.ExtendedRoundRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MaxExtendedRound != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.MaxExtendedRound))
		i--
		dAtA[i] = 0x10
	}
	if m.BaseAuction != nil {
		{
			size, err := m.BaseAuction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFundraising(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VestingSchedule) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingSchedule) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingSchedule) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReleaseTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReleaseTime):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintFundraising(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *VestingQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VestingQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VestingQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Released {
		i--
		if m.Released {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ReleaseTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ReleaseTime):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintFundraising(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.PayingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Auctioneer) > 0 {
		i -= len(m.Auctioneer)
		copy(dAtA[i:], m.Auctioneer)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Auctioneer)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllowedBidder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllowedBidder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllowedBidder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxBidAmount.Size()
		i -= size
		if _, err := m.MaxBidAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsWinner {
		i--
		if m.IsWinner {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Height != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.PayingCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.BidCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BidPrice.Size()
		i -= size
		if _, err := m.BidPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFundraising(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.BidType != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.BidType))
		i--
		dAtA[i] = 0x20
	}
	if m.Id != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintFundraising(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintFundraising(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFundraising(dAtA []byte, offset int, v uint64) int {
	offset -= sovFundraising(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AuctionCreationFee) > 0 {
		for _, e := range m.AuctionCreationFee {
			l = e.Size()
			n += 1 + l + sovFundraising(uint64(l))
		}
	}
	if m.ExtendedPeriod != 0 {
		n += 1 + sovFundraising(uint64(m.ExtendedPeriod))
	}
	l = len(m.FeeCollectorAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	return n
}

func (m *BaseAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFundraising(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovFundraising(uint64(m.Type))
	}
	if len(m.AllowedBidders) > 0 {
		for _, e := range m.AllowedBidders {
			l = e.Size()
			n += 1 + l + sovFundraising(uint64(l))
		}
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = len(m.SellingReserveAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = len(m.PayingReserveAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.StartPrice.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = m.SellingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = len(m.PayingCoinDenom)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = len(m.VestingReserveAddress)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	if len(m.VestingSchedules) > 0 {
		for _, e := range m.VestingSchedules {
			l = e.Size()
			n += 1 + l + sovFundraising(uint64(l))
		}
	}
	l = m.WinningPrice.Size()
	n += 1 + l + sovFundraising(uint64(l))
	if m.NumWinningBidders != 0 {
		n += 1 + sovFundraising(uint64(m.NumWinningBidders))
	}
	l = m.RemainingSellingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovFundraising(uint64(l))
	if len(m.EndTimes) > 0 {
		for _, e := range m.EndTimes {
			l = github_com_gogo_protobuf_types.SizeOfStdTime(e)
			n += 2 + l + sovFundraising(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovFundraising(uint64(m.Status))
	}
	return n
}

func (m *FixedPriceAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAuction != nil {
		l = m.BaseAuction.Size()
		n += 1 + l + sovFundraising(uint64(l))
	}
	return n
}

func (m *BatchAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseAuction != nil {
		l = m.BaseAuction.Size()
		n += 1 + l + sovFundraising(uint64(l))
	}
	if m.MaxExtendedRound != 0 {
		n += 1 + sovFundraising(uint64(m.MaxExtendedRound))
	}
	l = m.ExtendedRoundRate.Size()
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *VestingSchedule) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReleaseTime)
	n += 1 + l + sovFundraising(uint64(l))
	l = m.Weight.Size()
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *VestingQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovFundraising(uint64(m.AuctionId))
	}
	l = len(m.Auctioneer)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.PayingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ReleaseTime)
	n += 1 + l + sovFundraising(uint64(l))
	if m.Released {
		n += 2
	}
	return n
}

func (m *AllowedBidder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	l = m.MaxBidAmount.Size()
	n += 1 + l + sovFundraising(uint64(l))
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovFundraising(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovFundraising(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovFundraising(uint64(m.Id))
	}
	if m.BidType != 0 {
		n += 1 + sovFundraising(uint64(m.BidType))
	}
	l = m.BidPrice.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = m.BidCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	l = m.PayingCoin.Size()
	n += 1 + l + sovFundraising(uint64(l))
	if m.Height != 0 {
		n += 1 + sovFundraising(uint64(m.Height))
	}
	if m.IsWinner {
		n += 2
	}
	return n
}

func sovFundraising(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFundraising(x uint64) (n int) {
	return sovFundraising(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionCreationFee = append(m.AuctionCreationFee, types.Coin{})
			if err := m.AuctionCreationFee[len(m.AuctionCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedPeriod", wireType)
			}
			m.ExtendedPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExtendedPeriod |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeCollectorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeCollectorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= AuctionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowedBidders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AllowedBidders = append(m.AllowedBidders, AllowedBidder{})
			if err := m.AllowedBidders[len(m.AllowedBidders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SellingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayingCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingReserveAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingReserveAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingSchedules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingSchedules = append(m.VestingSchedules, VestingSchedule{})
			if err := m.VestingSchedules[len(m.VestingSchedules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WinningPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumWinningBidders", wireType)
			}
			m.NumWinningBidders = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumWinningBidders |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemainingSellingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemainingSellingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndTimes = append(m.EndTimes, time.Time{})
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&(m.EndTimes[len(m.EndTimes)-1]), dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AuctionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FixedPriceAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FixedPriceAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FixedPriceAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAuction == nil {
				m.BaseAuction = &BaseAuction{}
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAuction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseAuction == nil {
				m.BaseAuction = &BaseAuction{}
			}
			if err := m.BaseAuction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxExtendedRound", wireType)
			}
			m.MaxExtendedRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxExtendedRound |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtendedRoundRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExtendedRoundRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingSchedule) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingSchedule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingSchedule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReleaseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VestingQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VestingQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VestingQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auctioneer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Auctioneer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ReleaseTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Released", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Released = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllowedBidder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllowedBidder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllowedBidder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBidAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidType", wireType)
			}
			m.BidType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BidType |= BidType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayingCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFundraising
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFundraising
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PayingCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWinner", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWinner = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFundraising(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFundraising
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFundraising(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFundraising
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFundraising
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFundraising
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFundraising
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFundraising
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFundraising        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFundraising          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFundraising = fmt.Errorf("proto: unexpected end of group")
)
