syntax = "proto3";
package tendermint.fundraising;

// this line is used by starport scaffolding # proto/tx/import
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "fundraising/fundraising.proto";

option go_package = "github.com/tendermint/fundraising/x/fundraising/types";

// Msg defines the Msg service.
service Msg {
  // this line is used by Starport scaffolding # proto/tx/rpc
  // Submit a create fixed price auction message.
  rpc CreateFixedPriceAuction(MsgCreateFixedPriceAuction)
      returns (MsgCreateFixedPriceAuctionResponse);

  // Submit a create batch auction message.
  rpc CreateBatchAuction(MsgCreateBatchAuction)
      returns (MsgCreateBatchAuctionResponse);

  // Submit a cancel auction message.
  rpc CancelAuction(MsgCancelAuction) returns (MsgCancelAuctionResponse);

  // Submit a PlaceBid message to the certain fundraising.
  rpc PlaceBid(MsgPlaceBid) returns (MsgPlaceBidResponse);
}

// this line is used by Starport scaffolding # proto/tx/message

// MsgCreateFixedPriceAuction defines a SDK message for creating a fixed price
// auction.
message MsgCreateFixedPriceAuction {
  option (gogoproto.goproto_getters) = false;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 1;

  // allowed_bidders specifies the bidders who are allowed to bid for the
  // auction
  repeated AllowedBidder allowed_bidders = 2;

  // start_price specifies the starting price of the auction
  string start_price = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // selling_coin specifies the selling coin for the auction
  cosmos.base.v1beta1.Coin selling_coin = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid
  // for
  string paying_coin_denom = 5;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 6
      [ (gogoproto.nullable) = false ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 7
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 8
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

// MsgCreateFixedPriceAuctionResponse defines the
// Msg/MsgCreateFixedPriceAuctionResponse response type.
message MsgCreateFixedPriceAuctionResponse {}

// MsgCreateBatchAuction defines a SDK message for creating an batch
// auction.
//
// See:
// https://github.com/tendermint/fundraising/tree/main/x/fundraising/spec/04_messages.md
message MsgCreateBatchAuction {
  option (gogoproto.goproto_getters) = false;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 1;

  // allowed_bidders specifies the bidders who are allowed to bid for the
  // auction
  repeated AllowedBidder allowed_bidders = 2;

  // selling_coin specifies the selling coin for the auction
  cosmos.base.v1beta1.Coin selling_coin = 3 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid
  // for
  string paying_coin_denom = 4;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 5
      [ (gogoproto.nullable) = false ];

  // maximum_extended_round specifies the maximum number of extended rounds for
  // the auction
  uint32 max_extended_round = 6;

  // extended_round_rate specifies the rate that decides if the auction needs
  // another round
  string extended_round_rate = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 8
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // end_time specifies the end time of the plan
  google.protobuf.Timestamp end_time = 9
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
}

// MsgCreateBatchAuctionResponse defines the
// Msg/MsgCreateBatchAuctionResponse response type.
message MsgCreateBatchAuctionResponse {}

// MsgCancelAuction defines a SDK message for cancelling the auction.
// Cancelling is only allowed when the auction hasn't started yet.
message MsgCancelAuction {
  option (gogoproto.goproto_getters) = false;

  // auctioneer specifies the bech32-encoded address that is in charge of the
  // auction
  string auctioneer = 1;

  // auction_id specifies the auction id
  uint64 auction_id = 2;
}

// MsgCancelAuctionResponse defines the Msg/MsgCancelAuctionResponse
// response type.
message MsgCancelAuctionResponse {}

// MsgPlaceBid defines a SDK message for placing a bid for the auction.
message MsgPlaceBid { // id specifies index of the auction
  option (gogoproto.goproto_getters) = false;

  // auction_id specifies the auction id
  uint64 auction_id = 1;

  // bidder specifies the bech32-encoded address that bids for the auction
  string bidder = 2;

  // type specifies the bid type; type 1 is fixed price, 2 is how-much-worth, 3
  // is how-many-coins
  BidType bid_type = 3;

  // bid_price specifies the bid price.
  // The bid price must be the start price for fixed price auction whereas
  // the bide price can be any value that the bidder places.
  string bid_price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // bid_coin specifies the paying amount of coin or the selling amount that the
  // bidder bids
  cosmos.base.v1beta1.Coin bid_coin = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

// MsgPlaceBidResponse defines the Msg/MsgPlaceBidResponse response type.
message MsgPlaceBidResponse {}

// MsgModifyBid defines a SDK message for modifying an existing bid for the
// auction.
message MsgModifyBid { // id specifies index of the auction
  option (gogoproto.goproto_getters) = false;

  // auction_id specifies the auction id
  uint64 auction_id = 1;

  // bidder specifies the bech32-encoded address that bids for the auction
  string bidder = 2;

  // bid_id specifies the bid id
  uint64 bid_id = 3;

  // bid_price specifies the bid price.
  // the bide price must be above or equal to the original value that the bidder
  // placed.
  string bid_price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // bid_coin specifies the paying amount of coin or the selling amount that the
  // bidder bids
  cosmos.base.v1beta1.Coin bid_coin = 5 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin",
    (gogoproto.nullable) = false
  ];
}

// MsgModifyBidResponse defines the Msg/MsgModifyBidResponse response type.
message MsgModifyBidResponse {}
