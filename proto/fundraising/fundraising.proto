syntax = "proto3";
package tendermint.fundraising;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/tendermint/fundraising/x/fundraising/types";

// Params defines the set of params for the fundraising module.
message Params {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;

  // auction_creation_fee specifies the fee for fundraising creation fee.
  // this prevents from spamming attack and it is collected in the community
  // pool
  repeated cosmos.base.v1beta1.Coin auction_creation_fee = 1 [
    (gogoproto.moretags) = "yaml:\"auction_creation_fee\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  // extended_period specifies the extended period that determines how long
  // the extended auction round lasts.
  uint32 extended_period = 2
      [ (gogoproto.moretags) = "yaml:\"extended_period\"" ];

  // fee_collector_address is the module account address to collect fees within
  // the module
  string fee_collector_address = 3
      [ (gogoproto.moretags) = "yaml:\"fee_collector_address\"" ];
}

// BaseAuction defines a base auction type. It contains all the necessary fields
// for basic auction functionality. Any custom auction type should extend this
// type for additional functionality (e.g. english auction, fixed price
// auction).
message BaseAuction {
  option (gogoproto.goproto_getters) = false;

  option (cosmos_proto.implements_interface) = "AuctionI";

  // id specifies index of the auction
  uint64 id = 1;

  // type specifies the auction type; type 1 is fixed price and 2 is english
  AuctionType type = 2;

  // allowed_bidders specifies the bidders who are allowed to bid for the
  // auction
  repeated AllowedBidder allowed_bidders = 3;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 4;

  // selling_reserve_address specifies the bech32-encoded address that has all
  // the selling coin
  string selling_reserve_address = 5;

  // paying_reserve_address specifies the bech32-encoded address that has all
  // the paying coin
  string paying_reserve_address = 6;

  // start_price specifies the starting price of the auction
  // it is determined by the proportion of the price of paying coin denom
  string start_price = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // selling_coin specifies the selling coin for the auction
  cosmos.base.v1beta1.Coin selling_coin = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // paying_coin_denom specifies the paying coin denom that bidders use to bid
  // for
  string paying_coin_denom = 9;

  // vesting_reserve_address specifies the bech32-encoded vesting address that
  // holds vesting amounts of coin
  string vesting_reserve_address = 10;

  // vesting_schedules specifies the vesting schedules for the auction
  repeated VestingSchedule vesting_schedules = 11
      [ (gogoproto.nullable) = false ];

  // winning_price specifies the winning price of the auction
  string winning_price = 12 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // remaining_coin specifes the remaining amount of selling coin to sell
  cosmos.base.v1beta1.Coin remaining_coin = 13 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // start_time specifies the start time of the plan
  google.protobuf.Timestamp start_time = 14
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // end_times specifies the end time of the plan
  repeated google.protobuf.Timestamp end_times = 15
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // status specifies the auction status
  AuctionStatus status = 16;
}

// FixedPriceAuction defines the fixed price auction type. It is the most
// simpliest way to raise funds. An auctioneer sets the starting price for each
// selling amounts of coin and bidders bid to purchase based on the fixed price.
message FixedPriceAuction {
  option (gogoproto.goproto_getters) = false;

  BaseAuction base_auction = 1 [ (gogoproto.embed) = true ];
}

// EnglishAuction defines the english auction type. It is an ascending dynamic
// auction that an auctioneer decides the starting price of the selling amount
// of coin and bidders bid to purchase the amounts of coin. It creates
// competition for the price, not how fast bidders can bid.
message EnglishAuction {
  option (gogoproto.goproto_getters) = false;

  BaseAuction base_auction = 1 [ (gogoproto.embed) = true ];

  // maximum_bid_price specifies the maximum bid price for the auction
  string maximum_bid_price = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // extended specifies a number of extended rounds
  uint32 extended = 3;

  // extend_rate specifies the rate that decides if the auction needs another
  // round
  string extend_rate = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// AuctionType enumerates the valid types of an auction.
enum AuctionType {
  option (gogoproto.goproto_enum_prefix) = false;

  // AUCTION_TYPE_UNSPECIFIED defines the default auction type
  AUCTION_TYPE_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "AuctionTypeNil" ];
  // AUCTION_TYPE_FIXED_PRICE defines the fixed price auction type
  AUCTION_TYPE_FIXED_PRICE = 1
      [ (gogoproto.enumvalue_customname) = "AuctionTypeFixedPrice" ];
  // AUCTION_TYPE_ENGLISH defines the english auction type
  AUCTION_TYPE_ENGLISH = 2
      [ (gogoproto.enumvalue_customname) = "AuctionTypeEnglish" ];
}

// AuctionStatus enumerates the valid status of an auction.
enum AuctionStatus {
  option (gogoproto.goproto_enum_prefix) = false;

  // AUCTION_STATUS_UNSPECIFIED defines the default auction status
  AUCTION_STATUS_UNSPECIFIED = 0
      [ (gogoproto.enumvalue_customname) = "AuctionStatusNil" ];
  // AUCTION_STATUS_STANDBY defines the standby auction status
  AUCTION_STATUS_STANDBY = 1
      [ (gogoproto.enumvalue_customname) = "AuctionStatusStandBy" ];
  // AUCTION_STATUS_STARTED defines the started auction status
  AUCTION_STATUS_STARTED = 2
      [ (gogoproto.enumvalue_customname) = "AuctionStatusStarted" ];
  // AUCTION_STATUS_VESTING defines the vesting auction status
  AUCTION_STATUS_VESTING = 3
      [ (gogoproto.enumvalue_customname) = "AuctionStatusVesting" ];
  // AUCTION_STATUS_FINISHED defines the finished auction status
  AUCTION_STATUS_FINISHED = 4
      [ (gogoproto.enumvalue_customname) = "AuctionStatusFinished" ];
  // AUCTION_STATUS_CANCELLED defines the cancelled auction status
  AUCTION_STATUS_CANCELLED = 5
      [ (gogoproto.enumvalue_customname) = "AuctionStatusCancelled" ];
}

// VestingSchedule defines the vesting schedule for the owner of an auction.
message VestingSchedule {
  // release_time specifies the time for distribution of the vesting coin
  google.protobuf.Timestamp release_time = 1
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // weight specifies the vesting weight for the schedule
  string weight = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

// VestingQueue defines the vesting queue.
message VestingQueue {
  // auction_id specifes the id of the auction
  uint64 auction_id = 1;

  // auctioneer specifies the bech32-encoded address that creates the auction
  string auctioneer = 2;

  // paying_coin specifies the paying amount of coin
  cosmos.base.v1beta1.Coin paying_coin = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // release_time specifies the timestamp of the vesting schedule
  google.protobuf.Timestamp release_time = 4
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // released specifies the status of distribution
  bool released = 5;
}

// AllowedBidder defines an allowed bidder for the auction.
message AllowedBidder {
  // bidder specifies the bech32-encoded address that bids for the auction
  string bidder = 1;

  // max_bid_amount specifies the maximum bid amount that the bidder can bid
  string max_bid_amount = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

// Bid defines a standard bid for an auction.
message Bid {
  // auction_id specifies the id of the auction
  uint64 auction_id = 1;

  // sequence specifies a number to track first come first served based auction
  // type
  uint64 sequence = 2;

  // bidder specifies the bech32-encoded address that bids for the auction
  string bidder = 3;

  // price specifies the increasing bid price is only possible
  string price = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];

  // coin specifies the paying amount of coin that the bidder bids
  cosmos.base.v1beta1.Coin coin = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin"
  ];

  // height specifies the block height of the bid
  uint64 height = 6;

  // eligible specifies the bid that is eligible to purchase the selling coin
  bool eligible = 7;
}

// AddressType enumerates the available types of a address.
enum AddressType {
  option (gogoproto.goproto_enum_prefix) = false;

  // the 32 bytes length address type of ADR 028.
  ADDRESS_TYPE_32_BYTES = 0
      [ (gogoproto.enumvalue_customname) = "AddressType32Bytes" ];
  // the default 20 bytes length address type.
  ADDRESS_TYPE_20_BYTES = 1
      [ (gogoproto.enumvalue_customname) = "AddressType20Bytes" ];
}